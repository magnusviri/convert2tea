You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project dagger:


        class Dagger < Formula
          homepage "https://dagger.io"
          url "https://github.com/dagger/dagger.git",
              tag:      "v0.4.2",
              revision: "b8051d3fa73d932050d16863bd1205d68a85c663"
          head "https://github.com/dagger/dagger.git", branch: "main"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "go" => :build
          depends_on "docker" => :test
          def install
            ldflags = %W[
              -s -w
              -X github.com/dagger/dagger/internal/engine.Version=v#{version}
            ]
            system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/dagger"
            generate_completions_from_executable(bin/"dagger", "completion")
          end
          test do
            ENV["DOCKER_HOST"] = "unix://#{testpath}/invalid.sock"
            assert_match "dagger v#{version}", shell_output("#{bin}/dagger version")
            output = shell_output("#{bin}/dagger query brewtest 2>&1", 1)
            assert_match "Cannot connect to the Docker daemon", output
          end
        end



    Here's an example formula in the yml format for the project dagger:


        distributable:
          url: https://github.com/dagger/dagger/archive/refs/tags/v{{ version }}.tar.gz
          strip-components: 1

        versions:
          github: dagger/dagger
          strip: /v/

        provides:
          - bin/dagger

        build:
          script: |
            go build -v -ldflags="$LDFLAGS" ./cmd/dagger
            mkdir -p "{{ prefix }}"/bin
            mv dagger "{{ prefix }}"/bin
          dependencies:
            go.dev: ^1.18
          env:
            CGO_ENABLED: 0
            LDFLAGS:
              - -s
              - -w
              - -X go.dagger.io/dagger/version.Version={{ version }}
              - -X go.dagger.io/dagger/version.Revision=tea
            linux:
              # or segmentation fault
              # fix found here https://github.com/docker-library/golang/issues/402#issuecomment-982204575
              LDFLAGS:
                - -buildmode=pie

        test: |
            dagger version
            # This is a better test, but we might mask failures using || true
            # think more about this.
            #out=$(dagger query <<EOF 2>&1 || true
            #  {
            #    container {
            #      from(address:"alpine:latest") {
            #        withExec(args:["uname", "-nrio"]) {
            #          stdout
            #        }
            #      }
            #    }
            #  }
            #EOF
            #)
            #if command -v docker; then
            #  test ! -z "$out"
            #else
            #  test "$out" = 'Error: failed to run container: : exec: "docker": executable file not found in $PATH'
            #fi



    Here's an example ruby formula for the project counterfeiter:


        class Counterfeiter < Formula
          homepage "https://github.com/maxbrunsfeld/counterfeiter"
          url "https://github.com/maxbrunsfeld/counterfeiter/archive/refs/tags/v6.6.1.tar.gz"
          revision 1
          head "https://github.com/maxbrunsfeld/counterfeiter.git", branch: "master"
          depends_on "go"
          def install
            system "go", "build", *std_go_args(ldflags: "-s -w")
          end
          test do
            ENV["GOROOT"] = Formula["go"].opt_libexec
            output = shell_output("#{bin}/counterfeiter -p os 2>&1")
            assert_predicate testpath/"osshim", :exist?
            assert_match "Writing `Os` to `osshim/os.go`...", output
            output = shell_output("#{bin}/counterfeiter -generate 2>&1", 1)
            assert_match "no buildable Go source files", output
          end
        end



    Based on the examples provided, write a formula for the project counterfeiter in the yml format:
