You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project aria2:


        class Aria2 < Formula
          homepage "https://aria2.github.io/"
          url "https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0.tar.xz"
          revision 1
          depends_on "pkg-config" => :build
          depends_on "gettext"
          depends_on "libssh2"
          depends_on "sqlite"
          uses_from_macos "libxml2"
          uses_from_macos "zlib"
          on_linux do
            depends_on "openssl@1.1"
          end
          def install
            ENV.cxx11
            args = %W[
              --disable-dependency-tracking
              --prefix=#{prefix}
              --with-libssh2
              --without-gnutls
              --without-libgmp
              --without-libnettle
              --without-libgcrypt
            ]
            if OS.mac?
              args << "--with-appletls"
              args << "--without-openssl"
            else
              args << "--without-appletls"
              args << "--with-openssl"
            end
            system "./configure", *args
            system "make", "install"
            bash_completion.install "doc/bash_completion/aria2c"
          end
          test do
            system "#{bin}/aria2c", "https://brew.sh/"
            assert_predicate testpath/"index.html", :exist?, "Failed to create index.html!"
          end
        end



    Here's an example formula in the yml format for the project aria2:


        distributable:
          url: https://github.com/aria2/aria2/releases/download/release-{{ version }}/aria2-{{ version }}.tar.xz
          strip-components: 1

        versions:
          github: aria2/aria2
          strip: /^aria2 /

        provides:
          - bin/aria2c

        dependencies:
          zlib.net: ^1
          openssl.org: ^1
          libexpat.github.io: '*'
          sqlite.org: ^3

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            gnupg.org/libgcrypt: ^1
            gnupg.org/libgpg-error: ^1
            freedesktop.org/pkg-config: '*'
          script: |
            ./configure $ARGS
            make --jobs {{hw.concurrency}}
            make install
          env:
            ARGS:
              - --prefix="{{prefix}}"
              - --with-openssl
              - --with-libgcrypt

        test: |
          aria2c -v
          aria2c https://tea.xyz
          aria2c --seed-time=0 "magnet:?xt=urn:btih:d984f67af9917b214cd8b6048ab5624c7df6a07a&tr=https%3A%2F%2Facademictorrents.com%2Fannounce.php&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce"


    Here's an example ruby formula for the project groonga:


        class Groonga < Formula
          homepage "https://groonga.org/"
          url "https://packages.groonga.org/source/groonga/groonga-13.0.1.tar.gz"
          livecheck do
            url :homepage
            regex(%r{>v?(\d+(?:\.\d+)+)</a> is the latest release}i)
          end
          head do
            url "https://github.com/groonga/groonga.git", branch: "master"
            depends_on "autoconf" => :build
            depends_on "automake" => :build
            depends_on "libtool" => :build
          end
          depends_on "pkg-config" => :build
          depends_on "mecab"
          depends_on "mecab-ipadic"
          depends_on "msgpack"
          depends_on "openssl@1.1"
          depends_on "pcre"
          uses_from_macos "libxcrypt"
          on_linux do
            depends_on "glib"
          end
          link_overwrite "lib/groonga/plugins/normalizers/"
          link_overwrite "share/doc/groonga-normalizer-mysql/"
          link_overwrite "lib/pkgconfig/groonga-normalizer-mysql.pc"
          def install
            args = %w[
              --disable-zeromq
              --disable-apache-arrow
              --with-luajit=no
              --with-ssl
              --with-zlib
              --without-libstemmer
              --with-mecab
            ]
            system "./autogen.sh" if build.head?
            mkdir "builddir" do
              system "../configure", *args, *std_configure_args
              system "make", "install"
            end
            resource("groonga-normalizer-mysql").stage do
              ENV.prepend_path "PATH", bin
              ENV.prepend_path "PKG_CONFIG_PATH", lib/"pkgconfig"
              system "./configure", "--prefix=#{prefix}"
              system "make"
              system "make", "install"
            end
          end
          test do
            IO.popen("#{bin}/groonga -n #{testpath}/test.db", "r+") do |io|
              io.puts("table_create --name TestTable --flags TABLE_HASH_KEY --key_type ShortText")
              sleep 2
              io.puts("shutdown")
              # expected returned result is like this:
              # [[0,1447502555.38667,0.000824928283691406],true]\n
              assert_match(/\[\[0,\d+.\d+,\d+.\d+\],true\]/, io.read)
            end
            IO.popen("#{bin}/groonga -n #{testpath}/test-normalizer-mysql.db", "r+") do |io|
              io.puts "register normalizers/mysql"
              sleep 2
              io.puts("shutdown")
              # expected returned result is like this:
              # [[0,1447502555.38667,0.000824928283691406],true]\n
              assert_match(/\[\[0,\d+.\d+,\d+.\d+\],true\]/, io.read)
            end
          end
        end



    Based on the examples provided, write a formula for the project groonga in the yml format:
