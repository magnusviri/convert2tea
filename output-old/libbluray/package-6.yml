Unfortunately, it's not possible to directly convert a formula written in Ruby format to YML format. They are two different syntaxes for different package managers (Homebrew for Ruby format, and GX Package Manager for YML format). However, using the information provided in the Ruby formula, a YML formula for libbluray could be written as follows:


    distributable:
      url: https://download.videolan.org/videolan/libbluray/{{ version }}/libbluray-{{ version }}.tar.bz2
      strip-components: 1

    versions:
      github: videolan/libbluray/tags
      sort: vsemver
      filter: (?<!check_)[0-9]+(?:\.[0-9]+)*$

    build:
      dependencies:
        linux:
          gnu.org/gcc: '*'
        darwin:
          tea.xyz/gx/cc: c99
        tea.xyz/gx/autoconf: '*'
        tea.xyz/gx/automake: '*'
        tea.xyz/gx/libtool: '*'
        tea.xyz/gx/pkg-config: '*'
      script: |
        ./bootstrap
        ./configure --prefix="{{prefix}}" --disable-dependency-tracking --disable-silent-rules --disable-bdjava-jar
        make --jobs {{ hw.concurrency }} install

    test:
      dependencies:
        tea.xyz/gx/cc: c99
      script: |
        cc test.c -I{{include}} -L{{lib}} -lbluray -o test
        ./test


Note that a few changes were made to adapt the formula to the YML format and the GX Package Manager:

- The URL and version information were moved to the `distributable` and `versions` sections, respectively, using variables (`{{ version }}`) that will be replaced by the package manager at runtime.
- The `livecheck` block was dropped, as GX Package Manager deals with version information differently.
- The `head` dependency was transformed into explicit dependencies on `autoconf`, `automake` and `libtool`, which will be installed by GX Package Manager if needed.
- The `uses_from_macos` dependency was dropped, as GX Package Manager handles dependencies on macOS system libraries automatically.
- The `args` variable in the `install` block was dropped, and the configuration options were included directly in the `configure` command.
- The `test` block was adapted to use the GX Package Manager syntax for compiling and running tests.