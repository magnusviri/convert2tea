You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project eigen:


        class Eigen < Formula
          homepage "https://eigen.tuxfamily.org/"
          url "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz"
          revision 1
          head "https://gitlab.com/libeigen/eigen.git", branch: "master"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "cmake" => :build
          conflicts_with "freeling", because: "freeling ships its own copy of eigen"
          def install
            mkdir "eigen-build" do
              args = std_cmake_args
              args << "-Dpkg_config_libdir=#{lib}" << ".."
              system "cmake", *args
              system "make", "install"
            end
            (share/"cmake/Modules").install "cmake/FindEigen3.cmake"
          end
          test do
            (testpath/"test.cpp").write <<~EOS
              #include <iostream>
              #include <Eigen/Dense>
              using Eigen::MatrixXd;
              int main()
              {
                MatrixXd m(2,2);
                m(0,0) = 3;
                m(1,0) = 2.5;
                m(0,1) = -1;
                m(1,1) = m(1,0) + m(0,1);
                std::cout << m << std::endl;
              }
            EOS
            system ENV.cxx, "test.cpp", "-I#{include}/eigen3", "-o", "test"
            assert_equal %w[3 -1 2.5 1.5], shell_output("./test").split
          end
        end



    Here's an example formula in the yml format for the project eigen:


        distributable:
          url: https://gitlab.com/libeigen/eigen/-/archive/{{version}}/eigen-{{version}}.tar.gz
          strip-components: 1

        versions:
          - 3.4.0

        build:
          working-directory: build
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            cmake.org: '^3'
          script: |
            cmake .. -DCMAKE_INSTALL_PREFIX={{prefix}}
            make install

            # stuff expects `Eigen` to be in `include` rather than namespaced
            cd "{{prefix}}"
            mv include/eigen3/* include
            cd include
            rmdir eigen3
            # but work for stuff that expects the namespace too
            ln -s eigen3 .
          test:
            make test

        test:
          dependencies:
            tea.xyz/gx/cc: c99
            freedesktop.org/pkg-config: ^0.29
          env:
            cxxflags: $(pkg-config --cflags eigen3)
          fixture: |
            #include <iostream>
            #include <Eigen/Dense>
            using Eigen::MatrixXd;
            int main()
            {
              MatrixXd m(2,2);
              m(0,0) = 3;
              m(1,0) = 2.5;
              m(0,1) = -1;
              m(1,1) = m(1,0) + m(0,1);
              std::cout << m << std::endl;
            }
          script: |
            mv $FIXTURE test.cpp
            g++ test.cpp ${cxxflags} -o test
            ./test > output.txt
            out=$(./test)
            if test "$out" = $'  3  -1\n2.5 1.5'; then
              echo "PASS"
            else
              echo "FAIL"
            fi



    Here's an example ruby formula for the project libde265:


        class Libde265 < Formula
          homepage "https://github.com/strukturag/libde265"
          url "https://github.com/strukturag/libde265/releases/download/v1.0.11/libde265-1.0.11.tar.gz"
          # Fix -flat_namespace being used on Big Sur and later.
          patch do
            url "https://raw.githubusercontent.com/Homebrew/formula-patches/03cf8088210822aa2c1ab544ed58ea04c897d9c4/libtool/configure-big_sur.diff"
          end
          def install
            extra_args = []
            extra_args << "--build=aarch64-apple-darwin#{OS.kernel_version}" if OS.mac? && Hardware::CPU.arm?
            system "./configure", "--disable-dependency-tracking",
                                  "--disable-silent-rules",
                                  "--disable-sherlock265",
                                  "--disable-dec265",
                                  "--prefix=#{prefix}",
                                  *extra_args
            system "make", "install"
            # Install the test-related executables in libexec.
            (libexec/"bin").install bin/"acceleration_speed",
                                    bin/"block-rate-estim",
                                    bin/"tests"
          end
          test do
            system libexec/"bin/tests"
          end
        end



    Based on the examples provided, write a formula for the project libde265 in the yml format:
