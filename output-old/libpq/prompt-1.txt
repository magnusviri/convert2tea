You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project direnv:


        class Direnv < Formula
          homepage "https://direnv.net/"
          url "https://github.com/direnv/direnv/archive/v2.32.2.tar.gz"
          head "https://github.com/direnv/direnv.git", branch: "master"
          depends_on "go" => :build
          def install
            system "make", "install", "PREFIX=#{prefix}"
          end
          test do
            system bin/"direnv", "status"
          end
        end



    Here's an example formula in the yml format for the project direnv:


        distributable:
          url: https://github.com/direnv/direnv/archive/refs/tags/v{{version}}.tar.gz
          strip-components: 1

        versions:
          github: direnv/direnv/releases/tags

        provides:
          - bin/direnv

        build:
          dependencies:
            go.dev: ^1.18
            tea.xyz/gx/make: '*'
          script: |
            make install PREFIX="{{ prefix }}"

        test:
          test "$(direnv --version)" = "{{ version }}"



    Here's an example ruby formula for the project libpq:


        class Libpq < Formula
          homepage "https://www.postgresql.org/docs/15/libpq.html"
          url "https://ftp.postgresql.org/pub/source/v15.2/postgresql-15.2.tar.bz2"
          livecheck do
            url "https://ftp.postgresql.org/pub/source/"
            regex(%r{href=["']?v?(\d+(?:\.\d+)+)/?["' >]}i)
          end
          keg_only "conflicts with postgres formula"
          # GSSAPI provided by Kerberos.framework crashes when forked.
          # See https://github.com/Homebrew/homebrew-core/issues/47494.
          depends_on "krb5"
          depends_on "openssl@1.1"
          uses_from_macos "zlib"
          on_linux do
            depends_on "readline"
          end
          def install
            system "./configure", "--disable-debug",
                                  "--prefix=#{prefix}",
                                  "--with-gssapi",
                                  "--with-openssl",
                                  "--libdir=#{opt_lib}",
                                  "--includedir=#{opt_include}"
            dirs = %W[
              libdir=#{lib}
              includedir=#{include}
              pkgincludedir=#{include}/postgresql
              includedir_server=#{include}/postgresql/server
              includedir_internal=#{include}/postgresql/internal
            ]
            system "make"
            system "make", "-C", "src/bin", "install", *dirs
            system "make", "-C", "src/include", "install", *dirs
            system "make", "-C", "src/interfaces", "install", *dirs
            system "make", "-C", "src/common", "install", *dirs
            system "make", "-C", "src/port", "install", *dirs
            system "make", "-C", "doc", "install", *dirs
          end
          test do
            (testpath/"libpq.c").write <<~EOS
              #include <stdlib.h>
              #include <stdio.h>
              #include <libpq-fe.h>
              int main()
              {
                  const char *conninfo;
                  PGconn     *conn;
                  conninfo = "dbname = postgres";
                  conn = PQconnectdb(conninfo);
                  if (PQstatus(conn) != CONNECTION_OK) // This should always fail
                  {
                      printf("Connection to database attempted and failed");
                      PQfinish(conn);
                      exit(0);
                  }
                  return 0;
                }
            EOS
            system ENV.cc, "libpq.c", "-L#{lib}", "-I#{include}", "-lpq", "-o", "libpqtest"
            assert_equal "Connection to database attempted and failed", shell_output("./libpqtest")
          end
        end



    Based on the examples provided, write a formula for the project libpq in the yml format:
