You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bcrypt:


        class Bcrypt < Formula
          homepage "https://bcrypt.sourceforge.io/"
          url "https://bcrypt.sourceforge.io/bcrypt-1.1.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?bcrypt[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            system "make", "CC=#{ENV.cc}",
                           "CFLAGS=#{ENV.cflags}",
                           "LDFLAGS=-lz"
            bin.install "bcrypt"
            man1.install Utils::Gzip.compress("bcrypt.1")
          end
          test do
            (testpath/"test.txt").write("Hello World!")
            pipe_output("#{bin}/bcrypt -r test.txt", "12345678\n12345678\n")
            mv "test.txt.bfe", "test.out.txt.bfe"
            pipe_output("#{bin}/bcrypt -r test.out.txt.bfe", "12345678\n")
            assert_equal File.read("test.txt"), File.read("test.out.txt")
          end
        end



    Here's an example formula in the yml format for the project bcrypt:


        distributable:
          url: https://bcrypt.sourceforge.net/bcrypt-{{version.marketing}}.tar.gz
          strip-components: 1

        versions:
          - 1.1.0

        dependencies:
          zlib.net: '*'

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            make LDFLAGS=-lz PREFIX={{prefix}} install

        provides:
          - bin/bcrypt

        test:
          script: |
            echo "Hello World!" > test.txt
            printf '12345678\n12345678\n' | bcrypt -r test.txt
            mv test.txt.bfe test.out.txt.bfe
            printf '12345678\n' | bcrypt -r test.out.txt.bfe
            cat test.out.txt




    Here's an example ruby formula for the project openblas:


        class Openblas < Formula
          homepage "https://www.openblas.net/"
          url "https://github.com/xianyi/OpenBLAS/archive/v0.3.22.tar.gz"
          head "https://github.com/xianyi/OpenBLAS.git", branch: "develop"
          livecheck do
            url :stable
            strategy :github_latest
          end
          keg_only :shadowed_by_macos, "macOS provides BLAS in Accelerate.framework"
          depends_on "gcc" # for gfortran
          fails_with :clang
          def install
            ENV.runtime_cpu_detection
            ENV.deparallelize # build is parallel by default, but setting -j confuses it
            # The build log has many warnings of macOS build version mismatches.
            ENV["MACOSX_DEPLOYMENT_TARGET"] = MacOS.version
            ENV["DYNAMIC_ARCH"] = "1"
            ENV["USE_OPENMP"] = "1"
            # Force a large NUM_THREADS to support larger Macs than the VMs that build the bottles
            ENV["NUM_THREADS"] = "56"
            ENV["TARGET"] = case Hardware.oldest_cpu
            when :arm_vortex_tempest
              "VORTEX"
            else
              Hardware.oldest_cpu.upcase.to_s
            end
            # Must call in two steps
            system "make", "CC=#{ENV.cc}", "FC=gfortran", "libs", "netlib", "shared"
            system "make", "PREFIX=#{prefix}", "install"
            lib.install_symlink shared_library("libopenblas") => shared_library("libblas")
            lib.install_symlink shared_library("libopenblas") => shared_library("liblapack")
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <stdio.h>
              #include <stdlib.h>
              #include <math.h>
              #include "cblas.h"
              int main(void) {
                int i;
                double A[6] = {1.0, 2.0, 1.0, -3.0, 4.0, -1.0};
                double B[6] = {1.0, 2.0, 1.0, -3.0, 4.0, -1.0};
                double C[9] = {.5, .5, .5, .5, .5, .5, .5, .5, .5};
                cblas_dgemm(CblasColMajor, CblasNoTrans, CblasTrans,
                            3, 3, 2, 1, A, 3, B, 3, 2, C, 3);
                for (i = 0; i < 9; i++)
                  printf("%lf ", C[i]);
                printf("\\n");
                if (fabs(C[0]-11) > 1.e-5) abort();
                if (fabs(C[4]-21) > 1.e-5) abort();
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-I#{include}", "-L#{lib}", "-lopenblas",
                           "-o", "test"
            system "./test"
          end
        end



    Based on the examples provided, write a formula for the project openblas in the yml format:
