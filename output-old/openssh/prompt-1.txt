You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project eigen:


        class Eigen < Formula
          homepage "https://eigen.tuxfamily.org/"
          url "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz"
          revision 1
          head "https://gitlab.com/libeigen/eigen.git", branch: "master"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "cmake" => :build
          conflicts_with "freeling", because: "freeling ships its own copy of eigen"
          def install
            mkdir "eigen-build" do
              args = std_cmake_args
              args << "-Dpkg_config_libdir=#{lib}" << ".."
              system "cmake", *args
              system "make", "install"
            end
            (share/"cmake/Modules").install "cmake/FindEigen3.cmake"
          end
          test do
            (testpath/"test.cpp").write <<~EOS
              #include <iostream>
              #include <Eigen/Dense>
              using Eigen::MatrixXd;
              int main()
              {
                MatrixXd m(2,2);
                m(0,0) = 3;
                m(1,0) = 2.5;
                m(0,1) = -1;
                m(1,1) = m(1,0) + m(0,1);
                std::cout << m << std::endl;
              }
            EOS
            system ENV.cxx, "test.cpp", "-I#{include}/eigen3", "-o", "test"
            assert_equal %w[3 -1 2.5 1.5], shell_output("./test").split
          end
        end



    Here's an example formula in the yml format for the project eigen:


        distributable:
          url: https://gitlab.com/libeigen/eigen/-/archive/{{version}}/eigen-{{version}}.tar.gz
          strip-components: 1

        versions:
          - 3.4.0

        build:
          working-directory: build
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            cmake.org: '^3'
          script: |
            cmake .. -DCMAKE_INSTALL_PREFIX={{prefix}}
            make install

            # stuff expects `Eigen` to be in `include` rather than namespaced
            cd "{{prefix}}"
            mv include/eigen3/* include
            cd include
            rmdir eigen3
            # but work for stuff that expects the namespace too
            ln -s eigen3 .
          test:
            make test

        test:
          dependencies:
            tea.xyz/gx/cc: c99
            freedesktop.org/pkg-config: ^0.29
          env:
            cxxflags: $(pkg-config --cflags eigen3)
          fixture: |
            #include <iostream>
            #include <Eigen/Dense>
            using Eigen::MatrixXd;
            int main()
            {
              MatrixXd m(2,2);
              m(0,0) = 3;
              m(1,0) = 2.5;
              m(0,1) = -1;
              m(1,1) = m(1,0) + m(0,1);
              std::cout << m << std::endl;
            }
          script: |
            mv $FIXTURE test.cpp
            g++ test.cpp ${cxxflags} -o test
            ./test > output.txt
            out=$(./test)
            if test "$out" = $'  3  -1\n2.5 1.5'; then
              echo "PASS"
            else
              echo "FAIL"
            fi



    Here's an example ruby formula for the project openssh:


        class Openssh < Formula
          homepage "https://www.openssh.com/"
          url "https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.3p1.tar.gz"
          mirror "https://cloudflare.cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.3p1.tar.gz"
          version "9.3p1"
          livecheck do
            url "https://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/"
            regex(/href=.*?openssh[._-]v?(\d+(?:\.\d+)+(?:p\d+)?)\.t/i)
          end
          # Please don't resubmit the keychain patch option. It will never be accepted.
          # https://archive.is/hSB6d#10%25
          depends_on "pkg-config" => :build
          depends_on "ldns"
          depends_on "libfido2"
          depends_on "openssl@1.1"
          uses_from_macos "lsof" => :test
          uses_from_macos "krb5"
          uses_from_macos "libedit"
          uses_from_macos "libxcrypt"
          uses_from_macos "zlib"
          on_macos do
            # Both these patches are applied by Apple.
            # https://github.com/apple-oss-distributions/OpenSSH/blob/main/openssh/sandbox-darwin.c#L66
            patch do
              url "https://raw.githubusercontent.com/Homebrew/patches/1860b0a745f1fe726900974845d1b0dd3c3398d6/openssh/patch-sandbox-darwin.c-apple-sandbox-named-external.diff"
            end
            # https://github.com/apple-oss-distributions/OpenSSH/blob/main/openssh/sshd.c#L532
            patch do
              url "https://raw.githubusercontent.com/Homebrew/patches/d8b2d8c2612fd251ac6de17bf0cc5174c3aab94c/openssh/patch-sshd.c-apple-sandbox-named-external.diff"
            end
          end
          on_linux do
            depends_on "linux-pam"
          end
          def install
            if OS.mac?
              ENV.append "CPPFLAGS", "-D__APPLE_SANDBOX_NAMED_EXTERNAL__"
              # Ensure sandbox profile prefix is correct.
              # We introduce this issue with patching, it's not an upstream bug.
              inreplace "sandbox-darwin.c", "@PREFIX@/share/openssh", etc/"ssh"
            end
            args = *std_configure_args + %W[
              --sysconfdir=#{etc}/ssh
              --with-ldns
              --with-libedit
              --with-kerberos5
              --with-pam
              --with-ssl-dir=#{Formula["openssl@1.1"].opt_prefix}
              --with-security-key-builtin
            ]
            args << "--with-privsep-path=#{var}/lib/sshd" if OS.linux?
            system "./configure", *args
            system "make"
            ENV.deparallelize
            system "make", "install"
            # This was removed by upstream with very little announcement and has
            # potential to break scripts, so recreate it for now.
            # Debian have done the same thing.
            bin.install_symlink bin/"ssh" => "slogin"
            buildpath.install resource("com.openssh.sshd.sb")
            (etc/"ssh").install "com.openssh.sshd.sb" => "org.openssh.sshd.sb"
          end
          test do
            assert_match "OpenSSH_", shell_output("#{bin}/ssh -V 2>&1")
            port = free_port
            fork { exec sbin/"sshd", "-D", "-p", port.to_s }
            sleep 2
            assert_match "sshd", shell_output("lsof -i :#{port}")
          end
        end



    Based on the examples provided, write a formula for the project openssh in the yml format:
