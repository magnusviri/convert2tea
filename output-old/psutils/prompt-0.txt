You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project jansson:


        class Jansson < Formula
          homepage "https://digip.org/jansson/"
          url "https://github.com/akheron/jansson/releases/download/v2.14/jansson-2.14.tar.gz"
          def install
            system "./configure", *std_configure_args
            system "make", "install"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <jansson.h>
              #include <assert.h>
              int main()
              {
                json_t *json;
                json_error_t error;
                json = json_loads("\\"foo\\"", JSON_DECODE_ANY, &error);
                assert(json && json_is_string(json));
                json_decref(json);
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-L#{lib}", "-ljansson", "-o", "test"
            system "./test"
          end
        end



    Here's an example formula in the yml format for the project jansson:


        distributable:
          url: https://github.com/akheron/jansson/releases/download/v{{ version.raw }}/jansson-{{ version.raw }}.tar.gz
          strip-components: 1

        versions:
          github: akheron/jansson/tags
          strip: /^v/

        build:
          dependencies:
            linux:
              gnu.org/gcc: '*'
            darwin:
              tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            ./configure --prefix="{{prefix}}"
            make --jobs {{ hw.concurrency }} install

        test:
          dependencies:
            tea.xyz/gx/cc: c99
          script: |
            cc fixture.c -ljansson
            ./a.out


    Here's an example ruby formula for the project psutils:


        class Psutils < Formula
          homepage "http://knackered.org/angus/psutils/"
          url "ftp://ftp.knackered.org/pub/psutils/psutils-p17.tar.gz"
          mirror "https://ftp.osuosl.org/pub/blfs/conglomeration/psutils/psutils-p17.tar.gz"
          version "p17"
          # This regex is open-ended (i.e., it doesn't contain a trailing delimiter like
          # `\.t`), since the homepage only links to an unversioned archive file
          # (`psutils.tar.gz`) or a versioned archive file with additional trailing text
          # (`psutils-p17-a4-nt.zip`). Relying on the trailing text of the versioned
          # archive file remaining the same could make this check liable to break, so
          # we'll simply leave it looser until/unless it causes a problem.
          livecheck do
            url :homepage
            regex(/href=.*?psutils[._-](p\d+)/i)
          end
          def install
            # This is required, because the makefile expects that its man folder exists
            man1.mkpath
            system "make", "-f", "Makefile.unix",
                                 "PERL=/usr/bin/perl",
                                 "BINDIR=#{bin}",
                                 "INCLUDEDIR=#{pkgshare}",
                                 "MANDIR=#{man1}",
                                 "install"
          end
          test do
            system "sh", "-c", "#{bin}/showchar Palatino B > test.ps"
            system "#{bin}/psmerge", "-omulti.ps", "test.ps", "test.ps",
              "test.ps", "test.ps"
            system "#{bin}/psnup", "-n", "2", "multi.ps", "nup.ps"
            system "#{bin}/psselect", "-p1", "multi.ps", "test2.ps"
          end
        end



    Based on the examples provided, write a formula for the project psutils in the yml format:
