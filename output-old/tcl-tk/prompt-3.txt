You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project aria2:


        class Aria2 < Formula
          homepage "https://aria2.github.io/"
          url "https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0.tar.xz"
          revision 1
          depends_on "pkg-config" => :build
          depends_on "gettext"
          depends_on "libssh2"
          depends_on "sqlite"
          uses_from_macos "libxml2"
          uses_from_macos "zlib"
          on_linux do
            depends_on "openssl@1.1"
          end
          def install
            ENV.cxx11
            args = %W[
              --disable-dependency-tracking
              --prefix=#{prefix}
              --with-libssh2
              --without-gnutls
              --without-libgmp
              --without-libnettle
              --without-libgcrypt
            ]
            if OS.mac?
              args << "--with-appletls"
              args << "--without-openssl"
            else
              args << "--without-appletls"
              args << "--with-openssl"
            end
            system "./configure", *args
            system "make", "install"
            bash_completion.install "doc/bash_completion/aria2c"
          end
          test do
            system "#{bin}/aria2c", "https://brew.sh/"
            assert_predicate testpath/"index.html", :exist?, "Failed to create index.html!"
          end
        end



    Here's an example formula in the yml format for the project aria2:


        distributable:
          url: https://github.com/aria2/aria2/releases/download/release-{{ version }}/aria2-{{ version }}.tar.xz
          strip-components: 1

        versions:
          github: aria2/aria2
          strip: /^aria2 /

        provides:
          - bin/aria2c

        dependencies:
          zlib.net: ^1
          openssl.org: ^1
          libexpat.github.io: '*'
          sqlite.org: ^3

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            gnupg.org/libgcrypt: ^1
            gnupg.org/libgpg-error: ^1
            freedesktop.org/pkg-config: '*'
          script: |
            ./configure $ARGS
            make --jobs {{hw.concurrency}}
            make install
          env:
            ARGS:
              - --prefix="{{prefix}}"
              - --with-openssl
              - --with-libgcrypt

        test: |
          aria2c -v
          aria2c https://tea.xyz
          aria2c --seed-time=0 "magnet:?xt=urn:btih:d984f67af9917b214cd8b6048ab5624c7df6a07a&tr=https%3A%2F%2Facademictorrents.com%2Fannounce.php&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce"


    Here's an example ruby formula for the project tcl-tk:


        class TclTk < Formula
          homepage "https://www.tcl-lang.org"
          url "https://downloads.sourceforge.net/project/tcl/Tcl/8.6.13/tcl8.6.13-src.tar.gz"
          mirror "https://fossies.org/linux/misc/tcl8.6.13-src.tar.gz"
          revision 2
          livecheck do
            url :stable
            regex(%r{url=.*?/(?:tcl|tk).?v?(\d+(?:\.\d+)+)[._-]src\.t}i)
          end
          depends_on "openssl@1.1"
          uses_from_macos "zlib"
          on_linux do
            depends_on "freetype" => :build
            depends_on "pkg-config" => :build
            depends_on "libx11"
            depends_on "libxext"
          end
          conflicts_with "page", because: "both install `page` binaries"
          def install
            args = %W[
              --prefix=#{prefix}
              --includedir=#{include}/tcl-tk
              --mandir=#{man}
              --enable-threads
              --enable-64bit
            ]
            ENV["TCL_PACKAGE_PATH"] = "#{HOMEBREW_PREFIX}/lib"
            cd "unix" do
              system "./configure", *args
              system "make"
              system "make", "install"
              system "make", "install-private-headers"
              ln_s bin/"tclsh#{version.to_f}", bin/"tclsh"
            end
            # Let tk finds our new tclsh
            ENV.prepend_path "PATH", bin
            resource("tk").stage do
              cd "unix" do
                args << "--enable-aqua=yes" if OS.mac?
                system "./configure", *args, "--without-x", "--with-tcl=#{lib}"
                system "make"
                system "make", "install"
                system "make", "install-private-headers"
                ln_s bin/"wish#{version.to_f}", bin/"wish"
              end
            end
            resource("critcl").stage do
              system bin/"tclsh", "build.tcl", "install"
            end
            resource("tcllib").stage do
              system "./configure", "--prefix=#{prefix}", "--mandir=#{man}"
              system "make", "install"
              system "make", "critcl"
              cp_r "modules/tcllibc", "#{lib}/"
              ln_s "#{lib}/tcllibc/macosx-x86_64-clang", "#{lib}/tcllibc/macosx-x86_64" if OS.mac?
            end
            resource("tcltls").stage do
              system "./configure", "--with-ssl=openssl",
                                    "--with-openssl-dir=#{Formula["openssl@1.1"].opt_prefix}",
                                    "--prefix=#{prefix}",
                                    "--mandir=#{man}"
              system "make", "install"
            end
            resource("itk4").stage do
              itcl_dir = Pathname.glob(lib/"itcl*").last
              args = %W[
                --prefix=#{prefix}
                --exec-prefix=#{prefix}
                --with-tcl=#{lib}
                --with-tk=#{lib}
                --with-itcl=#{itcl_dir}
              ]
              system "./configure", *args
              system "make"
              system "make", "install"
            end
            # Conflicts with perl
            mv man/"man3/Thread.3", man/"man3/ThreadTclTk.3"
            # Use the sqlite-analyzer formula instead
            # https://github.com/Homebrew/homebrew-core/pull/82698
            rm bin/"sqlite3_analyzer"
          end
          def caveats
            <<~EOS
              The sqlite3_analyzer binary is in the `sqlite-analyzer` formula.
            EOS
          end
          test do
            assert_match "#{HOMEBREW_PREFIX}/lib", pipe_output("#{bin}/tclsh", "puts $auto_path\n")
            assert_equal "honk", pipe_output("#{bin}/tclsh", "puts honk\n").chomp
            # Fails with: no display name and no $DISPLAY environment variable
            return if OS.linux? && ENV["HOMEBREW_GITHUB_ACTIONS"]
            test_itk = <<~EOS
              # Check that Itcl and Itk load, and that we can define, instantiate,
              # and query the properties of a widget.
              # If anything errors, just exit
              catch {
                  package require Itcl
                  package require Itk
                  # Define class
                  itcl::class TestClass {
                      inherit itk::Toplevel
                      constructor {args} {
                          itk_component add bye {
                              button $itk_interior.bye -text "Bye"
                          }
                          eval itk_initialize $args
                      }
                  }
                  # Create an instance
                  set testobj [TestClass .#auto]
                  # Check the widget has a bye component with text property "Bye"
                  if {[[$testobj component bye] cget -text]=="Bye"} {
                      puts "OK"
                  }
              }
              exit
            EOS
            assert_equal "OK\n", pipe_output("#{bin}/wish", test_itk), "Itk test failed"
          end
        end



    Based on the examples provided, write a formula for the project tcl-tk in the yml format:
