You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bitcoin:


        class Bitcoin < Formula
          homepage "https://bitcoincore.org/"
          url "https://bitcoincore.org/bin/bitcoin-core-24.0.1/bitcoin-24.0.1.tar.gz"
          head "https://github.com/bitcoin/bitcoin.git", branch: "master"
          livecheck do
            url "https://bitcoincore.org/en/download/"
            regex(/latest version.*?v?(\d+(?:\.\d+)+)/i)
          end
          depends_on "autoconf" => :build
          depends_on "automake" => :build
          depends_on "libtool" => :build
          depends_on "pkg-config" => :build
          # berkeley db should be kept at version 4
          # https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md
          # https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md
          depends_on "berkeley-db@4"
          depends_on "boost"
          depends_on "libevent"
          depends_on macos: :catalina
          depends_on "miniupnpc"
          depends_on "zeromq"
          uses_from_macos "sqlite"
          on_linux do
            depends_on "util-linux" => :build # for `hexdump`
          end
          fails_with :gcc do
            version "7" # fails with GCC 7.x and earlier
            cause "Requires std::filesystem support"
          end
          def install
            system "./autogen.sh"
            system "./configure", *std_configure_args,
                                  "--disable-silent-rules",
                                  "--with-boost-libdir=#{Formula["boost"].opt_lib}"
            system "make", "install"
            pkgshare.install "share/rpcauth"
          end
          service do
            run opt_bin/"bitcoind"
          end
          test do
            system "#{bin}/test_bitcoin"
            # Test that we're using the right version of `berkeley-db`.
            port = free_port
            bitcoind = spawn bin/"bitcoind", "-regtest", "-rpcport=#{port}", "-listen=0", "-datadir=#{testpath}"
            sleep 15
            # This command will fail if we have too new a version.
            system bin/"bitcoin-cli", "-regtest", "-datadir=#{testpath}", "-rpcport=#{port}",
                                      "createwallet", "test-wallet", "false", "false", "", "false", "false"
          ensure
            Process.kill "TERM", bitcoind
          end
        end



    Here's an example formula in the yml format for the project bitcoin:


        distributable:
          url: https://bitcoincore.org/bin/bitcoin-core-{{version}}/bitcoin-{{version}}.tar.gz
          strip-components: 1

        versions:
          github: bitcoin/bitcoin
          strip: /^Bitcoin Core /

        dependencies:
          oracle.com/berkeley-db: ^18
          boost.org: ^1
          libevent.org: ^2
          zeromq.org: ^4
          sqlite.org: ^3

        build:
          dependencies:
            gnu.org/autoconf: ^2
            gnu.org/automake: ^1
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            freedesktop.org/pkg-config: ^0.29
            gnu.org/libtool: ^2
          script: |
            ./autogen.sh
            ./configure $ARGS
            make --jobs {{ hw.concurrency }} install
          env:
            ARGS:
              - --prefix={{prefix}}
              - --disable-debug
              - --disable-tests  # needs: `hexedit`
              - --disable-bench  # fails: linux/aarch64/v24.0.1

        provides:
          - bin/bitcoin-cli
          - bin/bitcoin-tx
          - bin/bitcoin-util
          - bin/bitcoin-wallet
          - bin/bitcoind

        test:
          bitcoind -version



    Here's an example ruby formula for the project tidy-html5:


        class TidyHtml5 < Formula
          homepage "https://www.html-tidy.org/"
          url "https://github.com/htacg/tidy-html5/archive/5.8.0.tar.gz"
          head "https://github.com/htacg/tidy-html5.git", branch: "next"
          livecheck do
            url :stable
            regex(/^v?(\d+\.\d*?[02468](?:\.\d+)*)$/i)
          end
          depends_on "cmake" => :build
          def install
            cd "build/cmake"
            system "cmake", "../..", *std_cmake_args
            system "make"
            system "make", "install"
          end
          test do
            output = pipe_output(bin/"tidy -q", "<!doctype html><title></title>")
            assert_match(/^<!DOCTYPE html>/, output)
            assert_match "HTML Tidy for HTML5", output
          end
        end



    Based on the examples provided, write a formula for the project tidy-html5 in the yml format:
