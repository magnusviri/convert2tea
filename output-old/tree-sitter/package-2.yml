distributable:
  url: https://github.com/tree-sitter/tree-sitter/archive/v{{version}}.tar.gz
  strip-components: 1

versions:
  github: tree-sitter/tree-sitter/releases/tags

provides:
  - bin/tree-sitter
  - lib/binding_web/tree-sitter.js
  - lib/binding_web/tree-sitter-web.d.ts
  - lib/binding_web/tree-sitter.wasm
  - lib/binding_web/package.json

build:
  dependencies:
    emscripten: '*'
    node: '*'
    rust: '*'
  script: |
    make AMALGAMATED=1
    make install PREFIX="{{ prefix }}"
    cd lib/binding_web
    npm install {{ language_node_local_npm_install_args }}
    cd ../..
    script/build-wasm
    cargo install {{ std_cargo_args }}

test:
  script: |
    assert_equal "tree-sitter {{ version }}", $(tree-sitter --version)
    echo "module.exports = grammar({ name: 'YOUR_LANGUAGE_NAME', rules: { source_file: $ => 'hello' } });" > grammar.js
    tree-sitter generate --abi=latest
    echo "hello" > test/corpus/hello.txt
    parse_result=$(tree-sitter parse test/corpus/hello.txt)
    assert_equal "(source_file [0, 0] - [1, 0])", $parse_result
    echo "========\n  hello\n========\nhello\n---\n(source_file)" > test/corpus/test_case.txt
    tree-sitter test
    echo "#include <string.h>\n#include <tree_sitter/api.h>\nint main(int argc, char* argv[]) {\n  TSParser *parser = ts_parser_new();\n  if (parser == NULL) {\n    return 1;\n  }\n  const char *source_code = \"empty\";\n  TSTree *tree = ts_parser_parse_string(parser, NULL, source_code, strlen(source_code));\n  if (tree == NULL) {\n    printf(\"tree creation failed\");\n  }\n  ts_tree_delete(tree);\n  ts_parser_delete(parser);\n  return 0;\n}" > test_program.c
    {{ cc }} test_program.c -L{{ lib }} -ltree-sitter -o test_program
    assert_equal "tree creation failed", $(./test_program)
    tree-sitter build-wasm