You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project vhs:


        class Vhs < Formula
          homepage "https://github.com/charmbracelet/vhs"
          url "https://github.com/charmbracelet/vhs/archive/v0.3.0.tar.gz"
          head "https://github.com/charmbracelet/vhs.git", branch: "main"
          depends_on "go" => :build
          depends_on "ffmpeg"
          depends_on "ttyd"
          def install
            system "go", "build", *std_go_args(ldflags: "-s -w -X main.Version=#{version}")
            (man1/"vhs.1").write Utils.safe_popen_read(bin/"vhs", "man")
            generate_completions_from_executable(bin/"vhs", "completion")
          end
          test do
            (testpath/"test.tape").write <<-TAPE
            Output test.gif
            Type "Foo Bar"
            Enter
            Sleep 1s
            TAPE
            system "#{bin}/vhs", "validate", "test.tape"
            assert_match version.to_s, shell_output("#{bin}/vhs --version")
          end
        end



    Here's an example formula in the yml format for the project vhs:


        distributable:
          url: https://github.com/charmbracelet/vhs/archive/refs/tags/v{{version}}.tar.gz
          strip-components: 1

        versions:
          github: charmbracelet/vhs

        provides:
          - bin/vhs

        interprets:
          extensions: tape
          args: vhs

        dependencies:
          ffmpeg.org: '>=5'  # note might work with older versions
          tsl0922.github.io/ttyd: ^1.7.2

        build:
          dependencies:
            go.dev: ^1.18
          script: |
            go mod download
            go build -v -ldflags="$LDFLAGS"
            mkdir -p "{{ prefix }}"/bin
            mv vhs "{{ prefix }}"/bin
          env:
            LDFLAGS:
              [-s, -w, "-X=main.Version={{version}}"]
            linux:
              # or segmentation fault
              # fix found here https://github.com/docker-library/golang/issues/402#issuecomment-982204575
              LDFLAGS:
              - -buildmode=pie

        #TODO better
        test:
          vhs --version



    Here's an example ruby formula for the project colima:


        class Colima < Formula
          homepage "https://github.com/abiosoft/colima/blob/main/README.md"
          url "https://github.com/abiosoft/colima.git",
              tag:      "v0.5.4",
              revision: "feef4176f56a7dea487d43689317a9d7fe9de27e"
          head "https://github.com/abiosoft/colima.git", branch: "main"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "go" => :build
          depends_on "lima"
          def install
            project = "github.com/abiosoft/colima"
            ldflags = %W[
              -s -w
              -X #{project}/config.appVersion=#{version}
              -X #{project}/config.revision=#{Utils.git_head}
            ]
            system "go", "build", *std_go_args(ldflags: ldflags), "./cmd/colima"
            generate_completions_from_executable(bin/"colima", "completion")
          end
          test do
            assert_match version.to_s, shell_output("#{bin}/colima version 2>&1")
            assert_match "colima is not running", shell_output("#{bin}/colima status 2>&1", 1)
          end
        end



    Based on the examples provided, write a formula for the project colima in the yml format:
