You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project mpdecimal:


        class Mpdecimal < Formula
          homepage "https://www.bytereef.org/mpdecimal/"
          url "https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-2.5.1.tar.gz"
          livecheck do
            url "https://www.bytereef.org/mpdecimal/download.html"
            regex(/href=.*?mpdecimal[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          def install
            system "./configure", "--prefix=#{prefix}"
            system "make"
            system "make", "install"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <assert.h>
              #include <mpdecimal.h>
              #include <string.h>
              int main() {
                mpd_context_t ctx;
                mpd_t *a, *b, *result;
                char *rstring;
                mpd_defaultcontext(&ctx);
                a = mpd_new(&ctx);
                b = mpd_new(&ctx);
                result = mpd_new(&ctx);
                mpd_set_string(a, "0.1", &ctx);
                mpd_set_string(b, "0.2", &ctx);
                mpd_add(result, a, b, &ctx);
                rstring = mpd_to_sci(result, 1);
                assert(strcmp(rstring, "0.3") == 0);
                mpd_del(a);
                mpd_del(b);
                mpd_del(result);
                mpd_free(rstring);
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-o", "test", "-L#{lib}", "-lmpdec"
            system "./test"
          end
        end



    Here's an example formula in the yml format for the project mpdecimal:


        distributable:
          url: https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-{{ version }}.tar.gz
          strip-components: 1

        versions:
          - 2.5.1

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            ./configure --prefix={{ prefix }}
            make --jobs {{hw.concurrency}} install
            rm -rf {{prefix}}/share  # docs are online

            if test {{hw.platform}} = darwin; then
              install_name_tool -change \
                @rpath/libmpdec.3.dylib \
                @loader_path/libmpdec.3.dylib \
                {{prefix}}/lib/libmpdec++.dylib
            fi

        test:
          dependencies:
            tea.xyz/gx/cc: c99
          script: |
            cc test.c -o test -lmpdec
            ./test



    Here's an example ruby formula for the project libvorbis:


        class Libvorbis < Formula
          homepage "https://xiph.org/vorbis/"
          url "https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.xz", using: :homebrew_curl
          mirror "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.tar.xz"
          livecheck do
            url "https://ftp.osuosl.org/pub/xiph/releases/vorbis/?C=M&O=D"
            regex(/href=.*?libvorbis[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          head do
            url "https://gitlab.xiph.org/xiph/vorbis.git"
            depends_on "autoconf" => :build
            depends_on "automake" => :build
            depends_on "libtool" => :build
          end
          depends_on "pkg-config" => :build
          depends_on "libogg"
          resource("oggfile") do
            url "https://upload.wikimedia.org/wikipedia/commons/c/c8/Example.ogg"
          end
          def install
            system "./autogen.sh" if build.head?
            system "./configure", "--disable-dependency-tracking",
                                  "--prefix=#{prefix}"
            system "make", "install"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <stdio.h>
              #include <assert.h>
              #include "vorbis/vorbisfile.h"
              int main (void) {
                OggVorbis_File vf;
                assert (ov_open_callbacks (stdin, &vf, NULL, 0, OV_CALLBACKS_NOCLOSE) >= 0);
                vorbis_info *vi = ov_info (&vf, -1);
                printf("Bitstream is %d channel, %ldHz\\n", vi->channels, vi->rate);
                printf("Encoded by: %s\\n", ov_comment(&vf,-1)->vendor);
                return 0;
              }
            EOS
            testpath.install resource("oggfile")
            system ENV.cc, "test.c", "-I#{include}", "-L#{lib}", "-lvorbisfile",
                           "-o", "test"
            assert_match "2 channel, 44100Hz\nEncoded by: Lavf59.27.100",
                         shell_output("./test < Example.ogg")
          end
        end



    Based on the examples provided, write a formula for the project libvorbis in the yml format:
