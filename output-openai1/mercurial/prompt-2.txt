You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bcrypt:


        class Bcrypt < Formula
          homepage "https://bcrypt.sourceforge.io/"
          url "https://bcrypt.sourceforge.io/bcrypt-1.1.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?bcrypt[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            system "make", "CC=#{ENV.cc}",
                           "CFLAGS=#{ENV.cflags}",
                           "LDFLAGS=-lz"
            bin.install "bcrypt"
            man1.install Utils::Gzip.compress("bcrypt.1")
          end
          test do
            (testpath/"test.txt").write("Hello World!")
            pipe_output("#{bin}/bcrypt -r test.txt", "12345678\n12345678\n")
            mv "test.txt.bfe", "test.out.txt.bfe"
            pipe_output("#{bin}/bcrypt -r test.out.txt.bfe", "12345678\n")
            assert_equal File.read("test.txt"), File.read("test.out.txt")
          end
        end



    Here's an example formula in the yml format for the project bcrypt:


        distributable:
          url: https://bcrypt.sourceforge.net/bcrypt-{{version.marketing}}.tar.gz
          strip-components: 1

        versions:
          - 1.1.0

        dependencies:
          zlib.net: '*'

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            make LDFLAGS=-lz PREFIX={{prefix}} install

        provides:
          - bin/bcrypt

        test:
          script: |
            echo "Hello World!" > test.txt
            printf '12345678\n12345678\n' | bcrypt -r test.txt
            mv test.txt.bfe test.out.txt.bfe
            printf '12345678\n' | bcrypt -r test.out.txt.bfe
            cat test.out.txt




    Here's an example ruby formula for the project mercurial:


        # No head build supported; if you need head builds of Mercurial, do so outside
        # of Homebrew.
        class Mercurial < Formula
          homepage "https://mercurial-scm.org/"
          url "https://www.mercurial-scm.org/release/mercurial-6.4.tar.gz"
          livecheck do
            url "https://www.mercurial-scm.org/release/"
            regex(/href=.*?mercurial[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          depends_on "python@3.11"
          def install
            ENV["HGPYTHON3"] = "1"
            ENV["PYTHON"] = python3 = which("python3.11")
            # FIXME: python@3.11 formula's "prefix scheme" patch tries to install into
            # HOMEBREW_PREFIX/{lib,bin}, which fails due to sandbox. As workaround,
            # manually set the installation paths to behave like prior python versions.
            setup_install_args = %W[
              --install-lib="#{prefix/Language::Python.site_packages(python3)}"
              --install-scripts="#{bin}"
              --install-data="#{prefix}"
            ]
            inreplace "Makefile", / setup\.py .* --prefix="\$\(PREFIX\)"/, "\\0 #{setup_install_args.join(" ")}"
            system "make", "install-bin", "PREFIX=#{prefix}"
            # Install chg (see https://www.mercurial-scm.org/wiki/CHg)
            system "make", "-C", "contrib/chg", "install", "PREFIX=#{prefix}", "HGPATH=#{bin}/hg", "HG=#{bin}/hg"
            # Configure a nicer default pager
            (buildpath/"hgrc").write <<~EOS
              [pager]
              pager = less -FRX
            EOS
            (etc/"mercurial").install "hgrc"
            # Install man pages, which come pre-built in source releases
            man1.install "doc/hg.1"
            man5.install "doc/hgignore.5", "doc/hgrc.5"
            # Move the bash completion script
            bash_completion.install share/"bash-completion/completions/hg"
          end
          def caveats
            return unless (opt_bin/"hg").exist?
            cacerts_configured = `#{opt_bin}/hg config web.cacerts`.strip
            return if cacerts_configured.empty?
            <<~EOS
              Homebrew has detected that Mercurial is configured to use a certificate
              bundle file as its trust store for TLS connections instead of using the
              default OpenSSL store. If you have trouble connecting to remote
              repositories, consider unsetting the `web.cacerts` property. You can
              determine where the property is being set by running:
                hg config --debug web.cacerts
            EOS
          end
          test do
            system "#{bin}/hg", "init"
          end
        end



    Based on the examples provided, write a formula for the project mercurial in the yml format:
