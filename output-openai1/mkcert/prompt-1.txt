You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project glow:


        class Glow < Formula
          homepage "https://github.com/charmbracelet/glow"
          url "https://github.com/charmbracelet/glow/archive/v1.5.0.tar.gz"
          depends_on "go" => :build
          def install
            system "go", "build", *std_go_args(ldflags: "-s -w -X main.Version=#{version}")
          end
          test do
            test_file = testpath/"test.md"
            test_file.write <<~EOS
              # header
              **bold**
              ```
              code
              ```
            EOS
            # failed with Linux CI run, but works with local run
            # https://github.com/charmbracelet/glow/issues/454
            if OS.linux?
              system bin/"glow", test_file
            else
              assert_match "# header", shell_output("#{bin}/glow #{test_file}")
            end
          end
        end



    Here's an example formula in the yml format for the project glow:


        distributable:
          url: https://github.com/charmbracelet/glow/archive/refs/tags/v{{version}}.tar.gz
          strip-components: 1

        versions:
          github: charmbracelet/glow

        provides:
          - bin/glow

        build:
          script: |
            go mod download
            go build -v -ldflags="$LDFLAGS"
            mkdir -p "{{ prefix }}"/bin
            mv glow "{{ prefix }}"/bin
          dependencies:
            go.dev: ^1.18
            #FIXME should be this but we didnâ€™t build 1.17 yet
            # go.dev: ~1.17
          env:
            GO111MODULE: on
            LDFLAGS:
              [-s, -w, "-X=main.Version={{version}}"]
            linux:
              # or segmentation fault
              # fix found here https://github.com/docker-library/golang/issues/402#issuecomment-982204575
              LDFLAGS:
              - -buildmode=pie

        test:
          glow --version



    Here's an example ruby formula for the project mkcert:


        class Mkcert < Formula
          homepage "https://github.com/FiloSottile/mkcert"
          url "https://github.com/FiloSottile/mkcert/archive/refs/tags/v1.4.4.tar.gz"
          depends_on "go" => :build
          def install
            system "go", "build", *std_go_args(ldflags: "-s -w -X main.Version=v#{version}")
          end
          test do
            ENV["CAROOT"] = testpath
            system bin/"mkcert", "brew.test"
            assert_predicate testpath/"brew.test.pem", :exist?
            assert_predicate testpath/"brew.test-key.pem", :exist?
            output = (testpath/"brew.test.pem").read
            assert_match "-----BEGIN CERTIFICATE-----", output
            output = (testpath/"brew.test-key.pem").read
            assert_match "-----BEGIN PRIVATE KEY-----", output
          end
        end



    Based on the examples provided, write a formula for the project mkcert in the yml format:
