You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project wumpus:


        class Wumpus < Formula
          homepage "http://www.catb.org/~esr/wumpus/"
          url "http://www.catb.org/~esr/wumpus/wumpus-1.9.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?wumpus[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          def install
            system "make"
            system "make", "prefix=#{prefix}", "install"
          end
          test do
            assert_match("HUNT THE WUMPUS",
                         pipe_output(bin/"wumpus", "^C"))
          end
        end



    Here's an example formula in the yml format for the project wumpus:


        distributable:
          url: http://www.catb.org/~esr/wumpus/wumpus-1.7.tar.gz
          strip-components: 1

        # When https://gitlab.com/esr/wumpus/-/merge_requests/3 is merged, then switch to
        #   https://gitlab.com/esr/wumpus/-/archive/{{ version.raw }}/wumpus-{{ version.raw }}.tar.gz

        versions:
          - 1.7

        # TODO: Is there a gitlab version provider?

        provides:
          - bin/wumpus
          - bin/superhack

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'

          script: |
            make
            make prefix={{prefix}} install

        test:
          script: echo no way to test this



    Here's an example ruby formula for the project open-mpi:


        class OpenMpi < Formula
          homepage "https://www.open-mpi.org/"
          url "https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.5.tar.bz2"
          livecheck do
            url :homepage
            regex(/MPI v?(\d+(?:\.\d+)+) release/i)
          end
          head do
            url "https://github.com/open-mpi/ompi.git", branch: "main"
            depends_on "autoconf" => :build
            depends_on "automake" => :build
            depends_on "libtool" => :build
          end
          depends_on "gcc" # for gfortran
          depends_on "hwloc"
          depends_on "libevent"
          conflicts_with "mpich", because: "both install MPI compiler wrappers"
          def install
            # Otherwise libmpi_usempi_ignore_tkr gets built as a static library
            ENV["MACOSX_DEPLOYMENT_TARGET"] = MacOS.version
            # Avoid references to the Homebrew shims directory
            inreplace_files = %w[
              ompi/tools/ompi_info/param.c
              oshmem/tools/oshmem_info/param.c
            ]
            cxx = OS.linux? ? "g++" : ENV.cxx
            inreplace inreplace_files, "OMPI_CXX_ABSOLUTE", "\"#{cxx}\""
            inreplace_files << "orte/tools/orte-info/param.c" unless build.head?
            inreplace_files << "opal/mca/pmix/pmix3x/pmix/src/tools/pmix_info/support.c" unless build.head?
            cc = OS.linux? ? "gcc" : ENV.cc
            inreplace inreplace_files, /(OPAL|PMIX)_CC_ABSOLUTE/, "\"#{cc}\""
            ENV.cxx11
            ENV.runtime_cpu_detection
            args = %W[
              --disable-silent-rules
              --enable-ipv6
              --enable-mca-no-build=reachable-netlink
              --sysconfdir=#{etc}
              --with-libevent=#{Formula["libevent"].opt_prefix}
              --with-sge
            ]
            args << "--with-platform-optimized" if build.head?
            system "./autogen.pl", "--force" if build.head?
            system "./configure", *std_configure_args, *args
            system "make", "all"
            system "make", "check"
            system "make", "install"
            # Fortran bindings install stray `.mod` files (Fortran modules) in `lib`
            # that need to be moved to `include`.
            include.install lib.glob("*.mod")
          end
          test do
            (testpath/"hello.c").write <<~EOS
              #include <mpi.h>
              #include <stdio.h>
              int main()
              {
                int size, rank, nameLen;
                char name[MPI_MAX_PROCESSOR_NAME];
                MPI_Init(NULL, NULL);
                MPI_Comm_size(MPI_COMM_WORLD, &size);
                MPI_Comm_rank(MPI_COMM_WORLD, &rank);
                MPI_Get_processor_name(name, &nameLen);
                printf("[%d/%d] Hello, world! My name is %s.\\n", rank, size, name);
                MPI_Finalize();
                return 0;
              }
            EOS
            system bin/"mpicc", "hello.c", "-o", "hello"
            system "./hello"
            system bin/"mpirun", "./hello"
            (testpath/"hellof.f90").write <<~EOS
              program hello
              include 'mpif.h'
              integer rank, size, ierror, tag, status(MPI_STATUS_SIZE)
              call MPI_INIT(ierror)
              call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierror)
              call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierror)
              print*, 'node', rank, ': Hello Fortran world'
              call MPI_FINALIZE(ierror)
              end
            EOS
            system bin/"mpif90", "hellof.f90", "-o", "hellof"
            system "./hellof"
            system bin/"mpirun", "./hellof"
          end
        end



    Based on the examples provided, write a formula for the project open-mpi in the yml format:
