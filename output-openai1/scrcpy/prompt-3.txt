You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project librist:


        class Librist < Formula
          homepage "https://code.videolan.org/rist/"
          url "https://code.videolan.org/rist/librist/-/archive/v0.2.7/librist-v0.2.7.tar.gz"
          revision 3
          head "https://code.videolan.org/rist/librist.git", branch: "master"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "cjson"
          depends_on "mbedtls"
          def install
            ENV.append "LDFLAGS", "-Wl,-rpath,#{rpath}"
            system "meson", "setup", "--default-library", "both", "-Dfallback_builtin=false", *std_meson_args, "build", "."
            system "meson", "compile", "-C", "build"
            system "meson", "install", "-C", "build"
          end
          test do
            assert_match "Starting ristsender", shell_output("#{bin}/ristsender 2>&1", 1)
          end
        end



    Here's an example formula in the yml format for the project librist:


        distributable:
          url: https://code.videolan.org/rist/librist/-/archive/v{{version}}/librist-v{{version}}.tar.gz
          strip-components: 1

        versions:
          - 0.2.7

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            mesonbuild.com: ^0.47
            ninja-build.org: 1
          working-directory:
            build
          script: |
            meson .. --prefix={{prefix}} --libdir={{prefix}}/lib --buildtype=release
            ninja -v
            ninja install
          env:
            CC: clang

        test:
          script: |
            ristsrppasswd test test

        provides:
          - bin/rist2rist
          - bin/ristreceiver
          - bin/ristsender
          - bin/ristsrppasswd



    Here's an example ruby formula for the project scrcpy:


        class Scrcpy < Formula
          homepage "https://github.com/Genymobile/scrcpy"
          url "https://github.com/Genymobile/scrcpy/archive/v2.0.tar.gz"
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          depends_on "ffmpeg"
          depends_on "libusb"
          depends_on "sdl2"
          fails_with gcc: "5"
          # Fix an "expected expression" error.
          # Remove when https://github.com/Genymobile/scrcpy/pull/3787 is merged.
          patch do
            url "https://github.com/Genymobile/scrcpy/commit/9ef5855cf2ce37708bb4e1eff21fd91027df95e9.patch?full_index=1"
          end
          def install
            r = resource("prebuilt-server")
            r.fetch
            cp r.cached_download, buildpath/"prebuilt-server.jar"
            mkdir "build" do
              system "meson", *std_meson_args,
                              "-Dprebuilt_server=#{buildpath}/prebuilt-server.jar",
                              ".."
              system "ninja", "install"
            end
          end
          def caveats
            <<~EOS
              At runtime, adb must be accessible from your PATH.
              You can install adb from Homebrew Cask:
                brew install --cask android-platform-tools
            EOS
          end
          test do
            fakeadb = (testpath/"fakeadb.sh")
            # When running, scrcpy calls adb five times:
            #  - adb start-server
            #  - adb devices -l
            #  - adb -s SERIAL push ... (to push scrcpy-server.jar)
            #  - adb -s SERIAL reverse ... tcp:PORT ...
            #  - adb -s SERIAL shell ...
            # However, exiting on $3 = shell didn't work properly, so instead
            # fakeadb exits on $3 = reverse
            fakeadb.write <<~EOS
              #!/bin/sh
              echo "$@" >> #{testpath/"fakeadb.log"}
              if [ "$1" = "devices" ]; then
                echo "List of devices attached"
                echo "emulator-1337          device product:sdk_gphone64_x86_64 model:sdk_gphone64_x86_64 device:emulator64_x86_64_arm64 transport_id:1"
              fi
              if [ "$3" = "reverse" ]; then
                exit 42
              fi
            EOS
            fakeadb.chmod 0755
            ENV["ADB"] = fakeadb
            # It's expected to fail after adb reverse step because fakeadb exits
            # with code 42
            out = shell_output("#{bin}/scrcpy --no-display --record=file.mp4 -p 1337 2>&1", 1)
            assert_match(/ 42/, out)
            log_content = File.read(testpath/"fakeadb.log")
            # Check that it used port we've specified
            assert_match(/tcp:1337/, log_content)
            # Check that it tried to push something from its prefix
            assert_match(/push #{prefix}/, log_content)
          end
        end



    Based on the examples provided, write a formula for the project scrcpy in the yml format:
