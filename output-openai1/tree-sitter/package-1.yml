distributable:
  url: https://github.com/tree-sitter/tree-sitter/archive/v{{ version }}.tar.gz
  strip-components: 1

versions:
  github: tree-sitter/tree-sitter/releases/tags

provides:
  - bin/tree-sitter
  - lib/binding_web/tree-sitter.js
  - lib/binding_web/tree-sitter-web.d.ts
  - lib/binding_web/tree-sitter.wasm

build:
  dependencies:
    emscripten: '*'
    node: '*'
    rust: '*'
  script: |
    make AMALGAMATED=1 &&
    make install PREFIX="{{ prefix }}" &&
    cd lib/binding_web &&
    npm install &&
    cd ../../ &&
    script/build-wasm &&
    cd cli &&
    cargo install --locked --root . --path . &&
    cd ../ &&
    cp lib/binding_web/{tree-sitter.js,tree-sitter-web.d.ts,tree-sitter.wasm,package.json} "#{lib}/binding_web/"

test:
  script: |
    assert_equal "tree-sitter #{version}", shell_output("#{bin}/tree-sitter --version").strip &&
    (testpath/"grammar.js").write <<~EOS
      module.exports = grammar({
        name: 'YOUR_LANGUAGE_NAME',
        rules: {
          source_file: $ => 'hello'
        }
      });
    EOS &&
    system bin/"tree-sitter", "generate", "--abi=latest" &&
    (testpath/"test/corpus/hello.txt").write <<~EOS
      hello
    EOS &&
    parse_result = shell_output("#{bin}/tree-sitter parse #{testpath}/test/corpus/hello.txt").strip &&
    assert_equal("(source_file [0, 0] - [1, 0])", parse_result) &&
    (testpath/"test"/"corpus"/"test_case.txt").write <<~EOS
      =========
        hello
      =========
      hello
      ---
      (source_file)
    EOS &&
    system bin/"tree-sitter", "test" &&
    (testpath/"test_program.c").write <<~EOS
      #include <string.h>
      #include <tree_sitter/api.h>
      int main(int argc, char* argv[]) {
        TSParser *parser = ts_parser_new();
        if (parser == NULL) {
          return 1;
        }
        const char *source_code = "empty";
        TSTree *tree = ts_parser_parse_string(
          parser,
          NULL,
          source_code,
          strlen(source_code)
        );
        if (tree == NULL) {
          printf("tree creation failed");
        }
        ts_tree_delete(tree);
        ts_parser_delete(parser);
        return 0;
      }
    EOS &&
    system ENV.cc, "test_program.c", "-L#{lib}", "-ltree-sitter", "-o", "test_program" &&
    assert_equal "tree creation failed", shell_output("./test_program") &&
    ENV.delete("CPATH") &&
    system bin/"tree-sitter", "build-wasm"