You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project aom:


        class Aom < Formula
          homepage "https://aomedia.googlesource.com/aom"
          url "https://aomedia.googlesource.com/aom.git",
              tag:      "v3.6.0",
              revision: "3c65175b1972da4a1992c1dae2365b48d13f9a8d"
          depends_on "cmake" => :build
          # `jpeg-xl` is currently not bottled on Linux
          on_macos do
            depends_on "pkg-config" => :build
            depends_on "jpeg-xl"
            depends_on "libvmaf"
          end
          on_intel do
            depends_on "yasm" => :build
          end
          def install
            ENV.runtime_cpu_detection unless Hardware::CPU.arm?
            args = std_cmake_args + [
              "-DCMAKE_INSTALL_RPATH=#{rpath}",
              "-DENABLE_DOCS=off",
              "-DENABLE_EXAMPLES=on",
              "-DENABLE_TESTDATA=off",
              "-DENABLE_TESTS=off",
              "-DENABLE_TOOLS=off",
              "-DBUILD_SHARED_LIBS=on",
            ]
            # Runtime CPU detection is not currently enabled for ARM on macOS.
            args << "-DCONFIG_RUNTIME_CPU_DETECT=0" if Hardware::CPU.arm?
            # Make unconditional when `jpeg-xl` is bottled on Linux
            if OS.mac?
              args += [
                "-DCONFIG_TUNE_BUTTERAUGLI=1",
                "-DCONFIG_TUNE_VMAF=1",
              ]
            end
            system "cmake", "-S", ".", "-B", "brewbuild", *args
            system "cmake", "--build", "brewbuild"
            system "cmake", "--install", "brewbuild"
          end
          test do
            resource("homebrew-bus_qcif_15fps.y4m").stage do
              system "#{bin}/aomenc", "--webm",
                                      "--tile-columns=2",
                                      "--tile-rows=2",
                                      "--cpu-used=8",
                                      "--output=bus_qcif_15fps.webm",
                                      "bus_qcif_15fps.y4m"
              system "#{bin}/aomdec", "--output=bus_qcif_15fps_decode.y4m",
                                      "bus_qcif_15fps.webm"
            end
          end
        end



    Here's an example formula in the yml format for the project aom:


        distributable:
          url: https://aomedia.googlesource.com/aom/+archive/v{{version}}.tar.gz

        versions:
          - 3.5.0

        build:
          dependencies:
            x86-64:
              nasm.us: 2
            tea.xyz/gx/cc: c99
            cmake.org: ^3
            tea.xyz/gx/make: '*'
          working-directory:
            out
          script: |
            cmake .. $ARGS
            make
            make install
          env:
            ARGS:
              - -DCMAKE_BUILD_TYPE=Release
              - -DCMAKE_INSTALL_PREFIX="{{prefix}}"
            linux:
              CFLAGS: -fPIC
              CXXFLAGS: -fPIC
              LDFLAGS: -pie
        test: |
          aomenc --help
          aomdec --help

        provides:
          - bin/aomenc
          - bin/aomdec



    Here's an example ruby formula for the project utf8cpp:


        class Utf8cpp < Formula
          homepage "https://github.com/nemtrif/utfcpp"
          url "https://github.com/nemtrif/utfcpp/archive/v3.2.3.tar.gz"
          depends_on "cmake" => [:build, :test]
          def install
            args = std_cmake_args + %w[
              -DUTF8_INSTALL:BOOL=ON
              -DUTF8_SAMPLES:BOOL=OFF
              -DUTF8_TESTS:BOOL=OFF
            ]
            mkdir "build" do
              system "cmake", "..", *args
              system "make", "install"
            end
          end
          test do
            (testpath/"CMakeLists.txt").write <<~EOS
              cmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)
              project(utf8_append LANGUAGES CXX)
              find_package(utf8cpp REQUIRED CONFIG)
              add_executable(utf8_append utf8_append.cpp)
              target_link_libraries(utf8_append PRIVATE utf8cpp)
            EOS
            (testpath/"utf8_append.cpp").write <<~EOS
              #include <utf8.h>
              int main() {
                unsigned char u[5] = {0, 0, 0, 0, 0};
                utf8::append(0x0448, u);
                return (u[0] == 0xd1 && u[1] == 0x88 && u[2] == 0 && u[3] == 0 && u[4] == 0) ? 0 : 1;
              }
            EOS
            system "cmake", ".", "-DCMAKE_PREFIX_PATH:STRING=#{opt_lib}", "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            system "make"
            system "./utf8_append"
          end
        end



    Based on the examples provided, write a formula for the project utf8cpp in the yml format:
