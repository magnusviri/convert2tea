You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project cmake:


        class Cmake < Formula
          homepage "https://www.cmake.org/"
          url "https://github.com/Kitware/CMake/releases/download/v3.26.2/cmake-3.26.2.tar.gz"
          mirror "http://fresh-center.net/linux/misc/cmake-3.26.2.tar.gz"
          mirror "http://fresh-center.net/linux/misc/legacy/cmake-3.26.2.tar.gz"
          head "https://gitlab.kitware.com/cmake/cmake.git", branch: "master"
          # The "latest" release on GitHub has been an unstable version before, so we
          # check the Git tags instead.
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          uses_from_macos "ncurses"
          on_linux do
            depends_on "openssl@3"
          end
          # The completions were removed because of problems with system bash
          # The `with-qt` GUI option was removed due to circular dependencies if
          # CMake is built with Qt support and Qt is built with MySQL support as MySQL uses CMake.
          # For the GUI application please instead use `brew install --cask cmake`.
          def install
            args = %W[
              --prefix=#{prefix}
              --no-system-libs
              --parallel=#{ENV.make_jobs}
              --datadir=/share/cmake
              --docdir=/share/doc/cmake
              --mandir=/share/man
            ]
            if OS.mac?
              args += %w[
                --system-zlib
                --system-bzip2
                --system-curl
              ]
            end
            system "./bootstrap", *args, "--", *std_cmake_args,
                                               "-DCMake_INSTALL_BASH_COMP_DIR=#{bash_completion}",
                                               "-DCMake_INSTALL_EMACS_DIR=#{elisp}",
                                               "-DCMake_BUILD_LTO=ON"
            system "make"
            system "make", "install"
          end
          def caveats
            <<~EOS
              To install the CMake documentation, run:
                brew install cmake-docs
            EOS
          end
          test do
            (testpath/"CMakeLists.txt").write("find_package(Ruby)")
            system bin/"cmake", "."
            # These should be supplied in a separate cmake-docs formula.
            refute_path_exists doc/"html"
            refute_path_exists man
          end
        end



    Here's an example formula in the yml format for the project cmake:


        distributable:
          url: https://github.com/Kitware/CMake/releases/download/v{{ version }}/cmake-{{ version }}.tar.gz
          strip-components: 1

        versions:
          github: Kitware/CMake/releases/tags
          ignore: /-rc\d/

        detect:
          cmd: cmake --version
          regex: cmake version \v

        dependencies:
          curl.se: '>=5'
          zlib.net: 1
          sourceware.org/bzip2: 1

        provides:
          darwin:
          - bin/cmake
          - bin/ccmake
          - bin/cpack
          - bin/ctest
          linux:
          - bin/cmake
          - bin/cpack
          - bin/ctest

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |-
            ./bootstrap $ARGS
            make --jobs {{ hw.concurrency }} install
            rm -rf {{prefix}}/share/doc  # docs are online
          env:
            V: 1
            ARGS:
              - --prefix={{ prefix }}
              - --parallel={{ hw.concurrency }}
              - --datadir=/var
              - --docdir=/share/doc
              - --mandir=/share/man
              - --system-zlib
              - --system-bzip2
              - --system-curl
              - --
              - -DCMake_BUILD_LTO=ON
              - -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
            darwin:
              ARGS:
              - -DZLIB_LIBRARY={{deps.zlib.net.prefix}}/lib/libz.dylib
              - -DZLIB_INCLUDE_DIR={{deps.zlib.net.prefix}}/include
              - -DCURL_LIBRARY={{deps.curl.se.prefix}}/lib/libcurl.dylib
              - -DCURL_INCLUDE_DIR={{deps.curl.se.prefix}}/include
              - -DBZIP2_LIBRARIES={{deps.sourceware.org/bzip2.prefix}}/lib/libbz2.a
              - -DBZIP2_INCLUDE_DIR={{deps.sourceware.org/bzip2.prefix}}/include
            linux:
              ARGS:
              - -DZLIB_LIBRARY={{deps.zlib.net.prefix}}/lib/libz.so
              - -DZLIB_INCLUDE_DIR={{deps.zlib.net.prefix}}/include
              - -DCURL_LIBRARY={{deps.curl.se.prefix}}/lib/libcurl.so
              - -DCURL_INCLUDE_DIR={{deps.curl.se.prefix}}/include
              - -DBZIP2_LIBRARIES={{deps.sourceware.org/bzip2.prefix}}/lib/libbz2.so
              - -DBZIP2_INCLUDE_DIR={{deps.sourceware.org/bzip2.prefix}}/include

          error-log:
            Bootstrap.cmk/cmake_bootstrap.log

        test:
          script:
            cmake --version



    Here's an example ruby formula for the project x264:


        class X264 < Formula
          homepage "https://www.videolan.org/developers/x264.html"
          # the latest commit on the stable branch
          url "https://code.videolan.org/videolan/x264.git",
              revision: "baee400fa9ced6f5481a728138fed6e867b0ff7f"
          version "r3095"
          head "https://code.videolan.org/videolan/x264.git", branch: "master"
          # Cross-check the abbreviated commit hashes from the release filenames with
          # the latest commits in the `stable` Git branch:
          # https://code.videolan.org/videolan/x264/-/commits/stable
          livecheck do
            url "https://artifacts.videolan.org/x264/release-macos-arm64/"
            regex(%r{href=.*?x264[._-](r\d+)[._-]([\da-z]+)/?["' >]}i)
            strategy :page_match do |page, regex|
              # Match the version and abbreviated commit hash in filenames
              matches = page.scan(regex)
              # Fetch the `stable` Git branch Atom feed
              stable_page_data = Homebrew::Livecheck::Strategy.page_content("https://code.videolan.org/videolan/x264/-/commits/stable?format=atom")
              next if stable_page_data[:content].blank?
              # Extract commit hashes from the feed content
              commit_hashes = stable_page_data[:content].scan(%r{/commit/([\da-z]+)}i).flatten
              next if commit_hashes.blank?
              # Only keep versions with a matching commit hash in the `stable` branch
              matches.map do |match|
                release_hash = match[1]
                commit_in_stable = commit_hashes.any? do |commit_hash|
                  commit_hash.start_with?(release_hash)
                end
                match[0] if commit_in_stable
              end
            end
          end
          on_macos do
            depends_on "gcc" if DevelopmentTools.clang_build_version <= 902
          end
          on_intel do
            depends_on "nasm" => :build
          end
          # https://code.videolan.org/videolan/x264/-/commit/b5bc5d69c580429ff716bafcd43655e855c31b02
          fails_with :clang do
            build 902
            cause "Stack realignment requires newer Clang"
          end
          def install
            args = %W[
              --prefix=#{prefix}
              --disable-lsmash
              --disable-swscale
              --disable-ffms
              --enable-shared
              --enable-static
              --enable-strip
            ]
            system "./configure", *args
            system "make", "install"
          end
          test do
            assert_match version.to_s.delete("r"), shell_output("#{bin}/x264 --version").lines.first
            (testpath/"test.c").write <<~EOS
              #include <stdint.h>
              #include <x264.h>
              int main()
              {
                  x264_picture_t pic;
                  x264_picture_init(&pic);
                  x264_picture_alloc(&pic, 1, 1, 1);
                  x264_picture_clean(&pic);
                  return 0;
              }
            EOS
            system ENV.cc, "-L#{lib}", "test.c", "-lx264", "-o", "test"
            system "./test"
          end
        end



    Based on the examples provided, write a formula for the project x264 in the yml format:
