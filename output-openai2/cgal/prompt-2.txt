duckdb

class Duckdb < Formula
  homepage "https://www.duckdb.org"
  url "https://github.com/duckdb/duckdb.git",
      tag:      "v0.7.1",
      revision: "b00b93f0b14bfff869e1facfd86a6b556a6f1c6e"
  depends_on "cmake" => :build
  def install
    mkdir "build"
    cd "build" do
      system "cmake", "..", *std_cmake_args, "-DBUILD_ICU_EXTENSION=1", "-DBUILD_JSON_EXTENSION=1",
             "-DBUILD_PARQUET_EXTENSION=1"
      system "make"
      system "make", "install"
      bin.install "duckdb"
      # The cli tool was renamed (0.1.8 -> 0.1.9)
      # Create a symlink to not break compatibility
      bin.install_symlink bin/"duckdb" => "duckdb_cli"
    end
  end
  test do
    path = testpath/"weather.sql"
    path.write <<~EOS
      CREATE TABLE weather (temp INTEGER);
      INSERT INTO weather (temp) VALUES (40), (45), (50);
      SELECT AVG(temp) FROM weather;
    EOS
    expected_output = <<~EOS
      ┌─────────────┐
      │ avg("temp") │
      │   double    │
      ├─────────────┤
      │        45.0 │
      └─────────────┘
    EOS
    assert_equal expected_output, shell_output("#{bin}/duckdb_cli < #{path}")
  end
end


distributable:
  url: https://github.com/duckdb/duckdb/archive/refs/tags/v{{version}}.tar.gz
  strip-components: 1

# if there’s a github then we can parse the versions
versions:
  github: duckdb/duckdb/releases/tags

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    cmake.org: ^3
    git-scm.org: '*'
  working-directory: build
  script: |
    # duckdb uses git to get its version
    git init ..
    git config user.email "bot@tea.xyz"
    git config user.name "teabot"
    git commit --allow-empty -mnil
    git tag v{{version}}

    cmake ..
    make --jobs {{ hw.concurrency }}
    mkdir -p "{{prefix}}"/bin
    mv duckdb "{{prefix}}"/bin
  env:
    ARGS:
      - -DCMAKE_INSTALL_PREFIX="{{prefix}}"
      - -DCMAKE_BUILD_TYPE=Release
      - -DBUILD_ICU_EXTENSION=1
      - -DBUILD_JSON_EXTENSION=1
      - -DBUILD_PARQUET_EXTENSION=1

provides:
  - bin/duckdb
  # ^^ specify the binaries or tea magic won’t work

test:
  fixture: |
    CREATE TABLE weather (temp INTEGER);
    INSERT INTO weather (temp) VALUES (40), (45), (50);
    SELECT AVG(temp) FROM weather;
  script: |
    out="$(duckdb < $FIXTURE)"
    exp=$(cat <<EOS
    ┌─────────────┐
    │ avg("temp") │
    │   double    │
    ├─────────────┤
    │        45.0 │
    └─────────────┘
    EOS)

    test "$out" = "$exp"

    if [[ "$(duckdb --version)" != "v{{version}}"* ]]; then
      echo "invalid version" >&2
      exit 1
    fi


class Cgal < Formula
  homepage "https://www.cgal.org/"
  url "https://github.com/CGAL/cgal/releases/download/v5.5.2/CGAL-5.5.2.tar.xz"
  depends_on "cmake" => [:build, :test]
  depends_on "qt@5" => [:build, :test]
  depends_on "boost"
  depends_on "eigen"
  depends_on "gmp"
  depends_on "mpfr"
  on_linux do
    depends_on "openssl@3"
  end
  fails_with gcc: "5"
  def install
    args = std_cmake_args + %w[
      -DCMAKE_CXX_FLAGS='-std=c++14'
      -DWITH_CGAL_Qt5=ON
    ]
    system "cmake", ".", *args
    system "make", "install"
  end
  test do
    # https://doc.cgal.org/latest/Triangulation_2/Triangulation_2_2draw_triangulation_2_8cpp-example.html and  https://doc.cgal.org/latest/Algebraic_foundations/Algebraic_foundations_2interoperable_8cpp-example.html
    (testpath/"surprise.cpp").write <<~EOS
      #include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
      #include <CGAL/Triangulation_2.h>
      #include <CGAL/draw_triangulation_2.h>
      #include <CGAL/basic.h>
      #include <CGAL/Coercion_traits.h>
      #include <CGAL/IO/io.h>
      #include <fstream>
      typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
      typedef CGAL::Triangulation_2<K>                            Triangulation;
      typedef Triangulation::Point                                Point;
      template <typename A, typename B>
      typename CGAL::Coercion_traits<A,B>::Type
      binary_func(const A& a , const B& b){
          typedef CGAL::Coercion_traits<A,B> CT;
          CGAL_static_assertion((CT::Are_explicit_interoperable::value));
          typename CT::Cast cast;
          return cast(a)*cast(b);
      }
      int main(int argc, char**) {
        std::cout<< binary_func(double(3), int(5)) << std::endl;
        std::cout<< binary_func(int(3), double(5)) << std::endl;
        std::ifstream in("data/triangulation_prog1.cin");
        std::istream_iterator<Point> begin(in);
        std::istream_iterator<Point> end;
        Triangulation t;
        t.insert(begin, end);
        if(argc == 3) // do not test Qt5 at runtime
          CGAL::draw(t);
        return EXIT_SUCCESS;
       }
    EOS
    (testpath/"CMakeLists.txt").write <<~EOS
      cmake_minimum_required(VERSION 3.1...3.15)
      find_package(CGAL COMPONENTS Qt5)
      add_definitions(-DCGAL_USE_BASIC_VIEWER -DQT_NO_KEYWORDS)
      include_directories(surprise BEFORE SYSTEM #{Formula["qt@5"].opt_include})
      add_executable(surprise surprise.cpp)
      target_include_directories(surprise BEFORE PUBLIC #{Formula["qt@5"].opt_include})
      target_link_libraries(surprise PUBLIC CGAL::CGAL_Qt5)
    EOS
    system "cmake", "-L", "-DQt5_DIR=#{Formula["qt@5"].opt_lib}/cmake/Qt5",
           "-DCMAKE_PREFIX_PATH=#{Formula["qt@5"].opt_lib}",
           "-DCMAKE_BUILD_RPATH=#{HOMEBREW_PREFIX}/lib", "-DCMAKE_PREFIX_PATH=#{prefix}", "."
    system "cmake", "--build", ".", "-v"
    assert_equal "15\n15", shell_output("./surprise").chomp
  end
end


cgal