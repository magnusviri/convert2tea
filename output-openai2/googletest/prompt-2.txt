duckdb

class Duckdb < Formula
  homepage "https://www.duckdb.org"
  url "https://github.com/duckdb/duckdb.git",
      tag:      "v0.7.1",
      revision: "b00b93f0b14bfff869e1facfd86a6b556a6f1c6e"
  depends_on "cmake" => :build
  def install
    mkdir "build"
    cd "build" do
      system "cmake", "..", *std_cmake_args, "-DBUILD_ICU_EXTENSION=1", "-DBUILD_JSON_EXTENSION=1",
             "-DBUILD_PARQUET_EXTENSION=1"
      system "make"
      system "make", "install"
      bin.install "duckdb"
      # The cli tool was renamed (0.1.8 -> 0.1.9)
      # Create a symlink to not break compatibility
      bin.install_symlink bin/"duckdb" => "duckdb_cli"
    end
  end
  test do
    path = testpath/"weather.sql"
    path.write <<~EOS
      CREATE TABLE weather (temp INTEGER);
      INSERT INTO weather (temp) VALUES (40), (45), (50);
      SELECT AVG(temp) FROM weather;
    EOS
    expected_output = <<~EOS
      ┌─────────────┐
      │ avg("temp") │
      │   double    │
      ├─────────────┤
      │        45.0 │
      └─────────────┘
    EOS
    assert_equal expected_output, shell_output("#{bin}/duckdb_cli < #{path}")
  end
end


distributable:
  url: https://github.com/duckdb/duckdb/archive/refs/tags/v{{version}}.tar.gz
  strip-components: 1

# if there’s a github then we can parse the versions
versions:
  github: duckdb/duckdb/releases/tags

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    cmake.org: ^3
    git-scm.org: '*'
  working-directory: build
  script: |
    # duckdb uses git to get its version
    git init ..
    git config user.email "bot@tea.xyz"
    git config user.name "teabot"
    git commit --allow-empty -mnil
    git tag v{{version}}

    cmake ..
    make --jobs {{ hw.concurrency }}
    mkdir -p "{{prefix}}"/bin
    mv duckdb "{{prefix}}"/bin
  env:
    ARGS:
      - -DCMAKE_INSTALL_PREFIX="{{prefix}}"
      - -DCMAKE_BUILD_TYPE=Release
      - -DBUILD_ICU_EXTENSION=1
      - -DBUILD_JSON_EXTENSION=1
      - -DBUILD_PARQUET_EXTENSION=1

provides:
  - bin/duckdb
  # ^^ specify the binaries or tea magic won’t work

test:
  fixture: |
    CREATE TABLE weather (temp INTEGER);
    INSERT INTO weather (temp) VALUES (40), (45), (50);
    SELECT AVG(temp) FROM weather;
  script: |
    out="$(duckdb < $FIXTURE)"
    exp=$(cat <<EOS
    ┌─────────────┐
    │ avg("temp") │
    │   double    │
    ├─────────────┤
    │        45.0 │
    └─────────────┘
    EOS)

    test "$out" = "$exp"

    if [[ "$(duckdb --version)" != "v{{version}}"* ]]; then
      echo "invalid version" >&2
      exit 1
    fi


class Googletest < Formula
  homepage "https://github.com/google/googletest"
  url "https://github.com/google/googletest/archive/v1.13.0.tar.gz"
  depends_on "cmake" => :build
  def install
    system "cmake", ".", *std_cmake_args
    system "make", "install"
    # for use case like `#include "googletest/googletest/src/gtest-all.cc"`
    (include/"googlemock/googlemock/src").install Dir["googlemock/src/*"]
    (include/"googletest/googletest/src").install Dir["googletest/src/*"]
  end
  test do
    (testpath/"test.cpp").write <<~EOS
      #include <gtest/gtest.h>
      #include <gtest/gtest-death-test.h>
      TEST(Simple, Boolean)
      {
        ASSERT_TRUE(true);
      }
    EOS
    system ENV.cxx, "test.cpp", "-std=c++14", "-L#{lib}", "-lgtest", "-lgtest_main", "-pthread", "-o", "test"
    system "./test"
  end
end


googletest