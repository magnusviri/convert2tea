jansson

class Jansson < Formula
  homepage "https://digip.org/jansson/"
  url "https://github.com/akheron/jansson/releases/download/v2.14/jansson-2.14.tar.gz"
  def install
    system "./configure", *std_configure_args
    system "make", "install"
  end
  test do
    (testpath/"test.c").write <<~EOS
      #include <jansson.h>
      #include <assert.h>
      int main()
      {
        json_t *json;
        json_error_t error;
        json = json_loads("\\"foo\\"", JSON_DECODE_ANY, &error);
        assert(json && json_is_string(json));
        json_decref(json);
        return 0;
      }
    EOS
    system ENV.cc, "test.c", "-L#{lib}", "-ljansson", "-o", "test"
    system "./test"
  end
end


distributable:
  url: https://github.com/akheron/jansson/releases/download/v{{ version.raw }}/jansson-{{ version.raw }}.tar.gz
  strip-components: 1

versions:
  github: akheron/jansson/tags
  strip: /^v/

build:
  dependencies:
    linux:
      gnu.org/gcc: '*'
    darwin:
      tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
  script: |
    ./configure --prefix="{{prefix}}"
    make --jobs {{ hw.concurrency }} install

test:
  dependencies:
    tea.xyz/gx/cc: c99
  script: |
    cc fixture.c -ljansson
    ./a.out

class Libass < Formula
  homepage "https://github.com/libass/libass"
  url "https://github.com/libass/libass/releases/download/0.17.1/libass-0.17.1.tar.xz"
  head do
    url "https://github.com/libass/libass.git", branch: "master"
    depends_on "autoconf" => :build
    depends_on "automake" => :build
    depends_on "libtool" => :build
  end
  depends_on "pkg-config" => :build
  depends_on "freetype"
  depends_on "fribidi"
  depends_on "harfbuzz"
  depends_on "libunibreak"
  on_linux do
    depends_on "fontconfig"
  end
  on_intel do
    depends_on "nasm" => :build
  end
  def install
    system "autoreconf", "-i" if build.head?
    args = %W[
      --disable-dependency-tracking
      --prefix=#{prefix}
    ]
    # libass uses coretext on macOS, fontconfig on Linux
    args << "--disable-fontconfig" if OS.mac?
    system "./configure", *args
    system "make", "install"
  end
  test do
    (testpath/"test.cpp").write <<~EOS
      #include "ass/ass.h"
      int main() {
        ASS_Library *library;
        ASS_Renderer *renderer;
        library = ass_library_init();
        if (library) {
          renderer = ass_renderer_init(library);
          if (renderer) {
            ass_renderer_done(renderer);
            ass_library_done(library);
            return 0;
          }
          else {
            ass_library_done(library);
            return 1;
          }
        }
        else {
          return 1;
        }
      }
    EOS
    system ENV.cc, "test.cpp", "-I#{include}", "-L#{lib}", "-lass", "-o", "test"
    system "./test"
  end
end


libass