erlang

class Erlang < Formula
  homepage "https://www.erlang.org/"
  # Download tarball from GitHub; it is served faster than the official tarball.
  # Don't forget to update the documentation resource along with the url!
  url "https://github.com/erlang/otp/releases/download/OTP-25.3/otp_src_25.3.tar.gz"
  livecheck do
    url :stable
    regex(/^OTP[._-]v?(\d+(?:\.\d+)+)$/i)
  end
  head do
    url "https://github.com/erlang/otp.git", branch: "master"
    depends_on "autoconf" => :build
    depends_on "automake" => :build
    depends_on "libtool" => :build
  end
  depends_on "openssl@1.1"
  depends_on "unixodbc"
  depends_on "wxwidgets" # for GUI apps like observer
  uses_from_macos "libxslt" => :build
  def install
    # Unset these so that building wx, kernel, compiler and
    # other modules doesn't fail with an unintelligible error.
    %w[LIBS FLAGS AFLAGS ZFLAGS].each { |k| ENV.delete("ERL_#{k}") }
    # Do this if building from a checkout to generate configure
    system "./otp_build", "autoconf" unless File.exist? "configure"
    args = %W[
      --enable-dynamic-ssl-lib
      --enable-hipe
      --enable-shared-zlib
      --enable-smp-support
      --enable-threads
      --enable-wx
      --with-odbc=#{Formula["unixodbc"].opt_prefix}
      --with-ssl=#{Formula["openssl@1.1"].opt_prefix}
      --without-javac
    ]
    if OS.mac?
      args << "--enable-darwin-64bit"
      args << "--enable-kernel-poll" if MacOS.version > :el_capitan
      args << "--with-dynamic-trace=dtrace" if MacOS::CLT.installed?
    end
    system "./configure", *std_configure_args, *args
    system "make"
    system "make", "install"
    # Build the doc chunks (manpages are also built by default)
    ENV.deparallelize { system "make", "docs", "DOC_TARGETS=chunks" }
    ENV.deparallelize { system "make", "install-docs" }
    doc.install resource("html")
  end
  def caveats
    <<~EOS
      Man pages can be found in:
        #{opt_lib}/erlang/man
      Access them with `erl -man`, or add this directory to MANPATH.
    EOS
  end
  test do
    assert_equal version, resource("html").version, "`html` resource needs updating!"
    system "#{bin}/erl", "-noshell", "-eval", "crypto:start().", "-s", "init", "stop"
    (testpath/"factorial").write <<~EOS
      #!#{bin}/escript
      %% -*- erlang -*-
      %%! -smp enable -sname factorial -mnesia debug verbose
      main([String]) ->
          try
              N = list_to_integer(String),
              F = fac(N),
              io:format("factorial ~w = ~w\n", [N,F])
          catch
              _:_ ->
                  usage()
          end;
      main(_) ->
          usage().
      usage() ->
          io:format("usage: factorial integer\n").
      fac(0) -> 1;
      fac(N) -> N * fac(N-1).
    EOS
    chmod 0755, "factorial"
    assert_match "usage: factorial integer", shell_output("./factorial")
    assert_match "factorial 42 = 1405006117752879898543142606244511569936384000000000", shell_output("./factorial 42")
  end
end


distributable:
  url: https://github.com/erlang/otp/releases/download/OTP-{{ version.raw }}/otp_src_{{ version.raw }}.tar.gz
  strip-components: 1

provides:
  - bin/ct_run
  - bin/dialyzer
  - bin/epmd
  - bin/erl
  - bin/erlc
  - bin/escript
  - bin/run_erl
  - bin/to_erl
  - bin/typer

interprets:
  extensions: erl
  args: escript

versions:
  github: erlang/otp
  strip: /^OTP /

dependencies:
  openssl.org: '*'
  invisible-island.net/ncurses: '*'

runtime:
  env:
    ERL_ROOTDIR: ${{prefix}}/lib/erlang

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    perl.org: '>=5'
  script: |
    export ERL_TOP=$(pwd)
    ./configure $ARGS
    make -j {{hw.concurrency}}
    make install
  env:
    CC: cc
    CXX: c++
    LD: ld
    ARGS:
      - --disable-debug
      - --disable-silent-rules
      - --prefix={{prefix}}
      - --enable-dynamic-ssl-lib
      - --enable-hipe
      - --enable-smp-support
      - --enable-threads
      - --enable-pie
      - --with-ssl={{deps.openssl.org.prefix}}
      - --without-javac
    darwin:
      ARGS:
        - --enable-darwin-64bit
        - --enable-kernel-poll
        - --with-dynamic-trace=dtrace

test:
  script: |
    epmd -kill || true
    epmd -daemon -address 127.0.0.1 -relaxed_command_check
    test "$(escript $FIXTURE 10)" = "factorial 10 = 3628800"
    epmd -kill || true

  env:
    ERL_DIST_PORT: 8001
  fixture: |
    #!/usr/bin/env escript
    %% -*- erlang -*-
    %%! -smp enable -sname factorial -mnesia debug verbose
    main([String]) ->
        try
            N = list_to_integer(String),
            F = fac(N),
            io:format("factorial ~w = ~w\n", [N,F])
        catch
            _:_ ->
                usage()
        end;
    main(_) ->
        usage().

    usage() ->
        io:format("usage: factorial integer\n").

    fac(0) -> 1;
    fac(N) -> N * fac(N-1).

class Libsodium < Formula
  homepage "https://libsodium.org/"
  url "https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz"
  revision 1
  livecheck do
    url "https://download.libsodium.org/libsodium/releases/"
    regex(/href=.*?libsodium[._-]v?(\d+(?:\.\d+)+)\.t/i)
  end
  head do
    url "https://github.com/jedisct1/libsodium.git", branch: "master"
    depends_on "autoconf" => :build
    depends_on "automake" => :build
    depends_on "libtool" => :build
  end
  def install
    system "./autogen.sh" if build.head?
    system "./configure", "--disable-debug", "--disable-dependency-tracking",
                          "--prefix=#{prefix}"
    system "make", "check"
    system "make", "install"
  end
  test do
    (testpath/"test.c").write <<~EOS
      #include <assert.h>
      #include <sodium.h>
      int main()
      {
        assert(sodium_init() != -1);
        return 0;
      }
    EOS
    system ENV.cc, "test.c", "-I#{include}", "-L#{lib}",
                   "-lsodium", "-o", "test"
    system "./test"
  end
end


libsodium