curl

class Curl < Formula
  homepage "https://curl.se"
  url "https://curl.se/download/curl-8.0.1.tar.bz2"
  mirror "https://github.com/curl/curl/releases/download/curl-8_0_0/curl-8.0.1.tar.bz2"
  mirror "http://fresh-center.net/linux/www/curl-8.0.1.tar.bz2"
  mirror "http://fresh-center.net/linux/www/legacy/curl-8.0.1.tar.bz2"
  livecheck do
    url "https://curl.se/download/"
    regex(/href=.*?curl[._-]v?(.*?)\.t/i)
  end
  head do
    url "https://github.com/curl/curl.git", branch: "master"
    depends_on "autoconf" => :build
    depends_on "automake" => :build
    depends_on "libtool" => :build
  end
  keg_only :provided_by_macos
  depends_on "pkg-config" => :build
  depends_on "brotli"
  depends_on "libidn2"
  depends_on "libnghttp2"
  depends_on "libssh2"
  depends_on "openldap"
  depends_on "openssl@1.1"
  depends_on "rtmpdump"
  depends_on "zstd"
  uses_from_macos "krb5"
  uses_from_macos "zlib"
  def install
    system "./buildconf" if build.head?
    args = %W[
      --disable-debug
      --disable-dependency-tracking
      --disable-silent-rules
      --prefix=#{prefix}
      --with-ssl=#{Formula["openssl@1.1"].opt_prefix}
      --without-ca-bundle
      --without-ca-path
      --with-ca-fallback
      --with-secure-transport
      --with-default-ssl-backend=openssl
      --with-libidn2
      --with-librtmp
      --with-libssh2
      --without-libpsl
    ]
    args << if OS.mac?
      "--with-gssapi"
    else
      "--with-gssapi=#{Formula["krb5"].opt_prefix}"
    end
    system "./configure", *args
    system "make", "install"
    system "make", "install", "-C", "scripts"
    libexec.install "scripts/mk-ca-bundle.pl"
  end
  test do
    # Fetch the curl tarball and see that the checksum matches.
    # This requires a network connection, but so does Homebrew in general.
    filename = (testpath/"test.tar.gz")
    system "#{bin}/curl", "-L", stable.url, "-o", filename
    filename.verify_checksum stable.checksum
    system libexec/"mk-ca-bundle.pl", "test.pem"
    assert_predicate testpath/"test.pem", :exist?
    assert_predicate testpath/"certdata.txt", :exist?
  end
end


distributable:
  url: https://curl.se/download/curl-{{version}}.tar.bz2
  strip-components: 1

versions:
  github: curl/curl
  strip: /^curl /

dependencies:
  openssl.org: ^1.1
  curl.se/ca-certs: '*'

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
  script: |
    ./configure $ARGS
    make --jobs {{ hw.concurrency }} install
  env:
    ARGS:
    - --prefix={{prefix}}
    - --with-openssl
    - --with-ca-fallback  # uses opensslâ€™s certs (which we control)
  test:
    make test

test:
  script: |
    curl -i tea.xyz
    curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org

# TODO need to fix the .la file

provides:
  - bin/curl
  - bin/curl-config


class Minizip < Formula
  homepage "https://www.winimage.com/zLibDll/minizip.html"
  url "https://zlib.net/zlib-1.2.13.tar.gz"
  mirror "https://downloads.sourceforge.net/project/libpng/zlib/1.2.13/zlib-1.2.13.tar.gz"
  livecheck do
    formula "zlib"
  end
  depends_on "autoconf" => :build
  depends_on "automake" => :build
  depends_on "libtool" => :build
  uses_from_macos "zlib"
  conflicts_with "minizip-ng",
    because: "both install a `libminizip.a` library"
  def install
    system "./configure", "--prefix=#{prefix}"
    system "make"
    cd "contrib/minizip" do
      if OS.mac?
        # edits to statically link to libz.a
        inreplace "Makefile.am" do |s|
          s.sub! "-L$(zlib_top_builddir)", "$(zlib_top_builddir)/libz.a"
          s.sub! "-version-info 1:0:0 -lz", "-version-info 1:0:0"
          s.sub! "libminizip.la -lz", "libminizip.la"
        end
      end
      system "autoreconf", "-fi"
      system "./configure", "--prefix=#{prefix}"
      system "make", "install"
    end
  end
  def caveats
    <<~EOS
      Minizip headers installed in 'minizip' subdirectory, since they conflict
      with the venerable 'unzip' library.
    EOS
  end
end


minizip