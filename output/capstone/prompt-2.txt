wumpus

class Wumpus < Formula
  homepage "http://www.catb.org/~esr/wumpus/"
  url "http://www.catb.org/~esr/wumpus/wumpus-1.9.tar.gz"
  livecheck do
    url :homepage
    regex(/href=.*?wumpus[._-]v?(\d+(?:\.\d+)+)\.t/i)
  end
  def install
    system "make"
    system "make", "prefix=#{prefix}", "install"
  end
  test do
    assert_match("HUNT THE WUMPUS",
                 pipe_output(bin/"wumpus", "^C"))
  end
end


distributable:
  url: https://gitlab.com/esr/wumpus/-/archive/{{ version.raw }}/wumpus-{{ version.raw }}.tar.gz
  strip-components: 1

versions:
  - 1.9

provides:
  - bin/wumpus
  - bin/superhack

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    #pagure.io/xmlto: '*'

  script: |
    make wumpus superhack
    # When xmlto is packaged then switch the to `make ... install`
    mkdir -p "{{prefix}}"/bin
    mv wumpus superhack "{{prefix}}"/bin
    # make prefix={{prefix}} install

test:
  script: |
    wumpus > wumpus.out &
    superhack > superhack.out &
    sleep 1
    test "x$(head -n1 wumpus.out)" = "xINSTRUCTIONS (Y-N)" && \
    test "x$(head -n1 superhack.out)" = "xHunt the Superhack"


class Capstone < Formula
  homepage "https://www.capstone-engine.org/"
  url "https://github.com/capstone-engine/capstone/archive/4.0.2.tar.gz"
  head "https://github.com/capstone-engine/capstone.git", branch: "next"
  def install
    ENV["HOMEBREW_CAPSTONE"] = "1"
    ENV["PREFIX"] = prefix
    system "./make.sh"
    system "make", "install", "PREFIX=#{prefix}"
  end
  test do
    # code comes from https://www.capstone-engine.org/lang_c.html
    (testpath/"test.c").write <<~EOS
      #include <stdio.h>
      #include <inttypes.h>
      #include <capstone/capstone.h>
      #define CODE "\\x55\\x48\\x8b\\x05\\xb8\\x13\\x00\\x00"
      int main()
      {
        csh handle;
        cs_insn *insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle) != CS_ERR_OK)
          return -1;
        count = cs_disasm(handle, CODE, sizeof(CODE)-1, 0x1000, 0, &insn);
        if (count > 0) {
          size_t j;
          for (j = 0; j < count; j++) {
            printf("0x%"PRIx64":\\t%s\\t\\t%s\\n", insn[j].address, insn[j].mnemonic,insn[j].op_str);
          }
          cs_free(insn, count);
        } else
          printf("ERROR: Failed to disassemble given code!\\n");
        cs_close(&handle);
        return 0;
      }
    EOS
    system ENV.cc, "test.c", "-L#{lib}", "-lcapstone", "-o", "test"
    system "./test"
  end
end


capstone