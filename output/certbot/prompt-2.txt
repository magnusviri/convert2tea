You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project s4cmd:


        class S4cmd < Formula
          include Language::Python::Virtualenv
          homepage "https://github.com/bloomreach/s4cmd"
          url "https://files.pythonhosted.org/packages/42/b4/0061f4930958cd790098738659c1c39f8feaf688e698142435eedaa4ae34/s4cmd-2.1.0.tar.gz"
          revision 1
          head "https://github.com/bloomreach/s4cmd.git", branch: "master"
          depends_on "python@3.11"
          depends_on "six"
          def install
            virtualenv_install_with_resources
          end
          test do
            assert_match "Unable to locate credentials", shell_output("#{bin}/s4cmd ls s3://brew-test 2>&1", 1)
            assert_match version.to_s, shell_output("#{bin}/s4cmd --version")
          end
        end



    Here's an example formula in the yml format for the project s4cmd:


        distributable:
          url: https://github.com/bloomreach/s4cmd/archive/refs/tags/{{version}}.tar.gz
          strip-components: 1

        versions:
          github: bloomreach/s4cmd/tags

        dependencies:
          python.org: ^3

        build:
          python-venv.sh {{prefix}}/bin/s4cmd

        provides:
          - bin/s4cmd

        test:
          s4cmd --help



    Here's an example ruby formula for the project certbot:


        class Certbot < Formula
          include Language::Python::Virtualenv
          homepage "https://certbot.eff.org/"
          url "https://files.pythonhosted.org/packages/96/41/dffce7ba281a21edd231ad7e7c7cb363c8aecb53ca4b8fee7e7ec24ea1f2/certbot-2.4.0.tar.gz"
          head "https://github.com/certbot/certbot.git", branch: "master"
          depends_on "rust" => :build # for cryptography
          depends_on "augeas"
          depends_on "dialog"
          depends_on "openssl@1.1"
          depends_on "python@3.11"
          depends_on "six"
          uses_from_macos "libffi"
          on_linux do
            depends_on "pkg-config" => :build
          end
          # Required for tests
          # Required for tests
          def install
            if build.head?
              head_packages = %w[acme certbot certbot-apache certbot-nginx]
              venv = virtualenv_create(libexec, "python3.11")
              venv.pip_install resources.reject { |r| head_packages.include? r.name }
              venv.pip_install_and_link head_packages.map { |pkg| buildpath/pkg }
              pkgshare.install buildpath/"certbot/examples"
            else
              virtualenv_install_with_resources
              pkgshare.install buildpath/"examples"
            end
          end
          test do
            assert_match version.to_s, pipe_output("#{bin}/certbot --version 2>&1")
            # This throws a bad exit code but we can check it actually is failing
            # for the right reasons by asserting. --version never fails even if
            # resources are missing or outdated/too new/etc.
            assert_match "Either run as root", shell_output("#{bin}/certbot 2>&1", 1)
          end
        end



    Based on the examples provided, write a formula for the project certbot in the yml format:
