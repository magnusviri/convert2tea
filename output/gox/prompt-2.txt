You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project gum:


        class Gum < Formula
          homepage "https://github.com/charmbracelet/gum"
          url "https://github.com/charmbracelet/gum/archive/v0.10.0.tar.gz"
          head "https://github.com/charmbracelet/gum.git", branch: "main"
          depends_on "go" => :build
          def install
            system "go", "build", *std_go_args(ldflags: "-s -w -X main.Version=#{version}")
            man_page = Utils.safe_popen_read(bin/"gum", "man")
            (man1/"gum.1").write man_page
            generate_completions_from_executable(bin/"gum", "completion")
          end
          test do
            assert_match "Gum", shell_output("#{bin}/gum format 'Gum'").chomp
            assert_equal "foo", shell_output("#{bin}/gum style foo").chomp
            assert_equal "foo\nbar", shell_output("#{bin}/gum join --vertical foo bar").chomp
            assert_equal "foobar", shell_output("#{bin}/gum join foo bar").chomp
          end
        end



    Here's an example formula in the yml format for the project gum:


        distributable:
          url: https://github.com/charmbracelet/gum/archive/refs/tags/v{{version}}.tar.gz
          strip-components: 1

        versions:
          github: charmbracelet/gum

        provides:
          - bin/gum

        build:
          script: |
            go mod download
            go build -v -ldflags="$LDFLAGS"
            mkdir -p "{{ prefix }}"/bin
            mv gum "{{ prefix }}"/bin
          dependencies:
            go.dev: ^1.18
            #FIXME should be this but we didnâ€™t build 1.17 yet
            # go.dev: ~1.17
          env:
            GO111MODULE: on
            LDFLAGS:
              [-s, -w, "-X=main.Version={{version}}"]
            linux:
              # or segmentation fault
              # fix found here https://github.com/docker-library/golang/issues/402#issuecomment-982204575
              LDFLAGS:
              - -buildmode=pie
        test:
          gum --version



    Here's an example ruby formula for the project gox:


        class Gox < Formula
          homepage "https://github.com/mitchellh/gox"
          url "https://github.com/mitchellh/gox/archive/v1.0.1.tar.gz"
          head "https://github.com/mitchellh/gox.git", branch: "master"
          depends_on "go"
          # This resource is for the test so doesn't really need to be updated.
          def install
            system "go", "build", *std_go_args
          end
          test do
            ENV["GOPATH"] = testpath
            ENV["GO111MODULE"] = "auto"
            (testpath/"src/github.com/ericchiang/pup").install resource("pup")
            cd "src/github.com/ericchiang/pup" do
              output = shell_output("#{bin}/gox -arch amd64 -os darwin -os freebsd")
              assert_match "parallel", output
              assert_predicate Pathname.pwd/"pup_darwin_amd64", :executable?
              assert_predicate Pathname.pwd/"pup_freebsd_amd64", :executable?
              refute_predicate Pathname.pwd/"pup_linux_amd64", :exist?
            end
          end
        end



    Based on the examples provided, write a formula for the project gox in the yml format:
