wumpus

class Wumpus < Formula
  homepage "http://www.catb.org/~esr/wumpus/"
  url "http://www.catb.org/~esr/wumpus/wumpus-1.9.tar.gz"
  livecheck do
    url :homepage
    regex(/href=.*?wumpus[._-]v?(\d+(?:\.\d+)+)\.t/i)
  end
  def install
    system "make"
    system "make", "prefix=#{prefix}", "install"
  end
  test do
    assert_match("HUNT THE WUMPUS",
                 pipe_output(bin/"wumpus", "^C"))
  end
end


distributable:
  url: https://gitlab.com/esr/wumpus/-/archive/{{ version.raw }}/wumpus-{{ version.raw }}.tar.gz
  strip-components: 1

versions:
  - 1.9

provides:
  - bin/wumpus
  - bin/superhack

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    #pagure.io/xmlto: '*'

  script: |
    make wumpus superhack
    # When xmlto is packaged then switch the to `make ... install`
    mkdir -p "{{prefix}}"/bin
    mv wumpus superhack "{{prefix}}"/bin
    # make prefix={{prefix}} install

test:
  script: |
    wumpus > wumpus.out &
    superhack > superhack.out &
    sleep 1
    test "x$(head -n1 wumpus.out)" = "xINSTRUCTIONS (Y-N)" && \
    test "x$(head -n1 superhack.out)" = "xHunt the Superhack"


class JsonC < Formula
  homepage "https://github.com/json-c/json-c/wiki"
  url "https://github.com/json-c/json-c/archive/refs/tags/json-c-0.16-20220414.tar.gz"
  version "0.16"
  head "https://github.com/json-c/json-c.git", branch: "master"
  livecheck do
    url :stable
    regex(/^json-c[._-](\d+(?:\.\d+)+)(?:[._-]\d{6,8})?$/i)
  end
  depends_on "cmake" => :build
  def install
    mkdir "build" do
      system "cmake", "..", *std_cmake_args
      system "make", "install"
    end
  end
  test do
    (testpath/"test.c").write <<~'EOS'
      #include <stdio.h>
      #include <json-c/json.h>
      int main() {
        json_object *obj = json_object_new_object();
        json_object *value = json_object_new_string("value");
        json_object_object_add(obj, "key", value);
        printf("%s\n", json_object_to_json_string(obj));
        return 0;
      }
    EOS
    system ENV.cc, "-I#{include}", "test.c", "-L#{lib}", "-ljson-c", "-o", "test"
    assert_equal '{ "key": "value" }', shell_output("./test").chomp
  end
end


json-c