You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bcrypt:


        class Bcrypt < Formula
          homepage "https://bcrypt.sourceforge.io/"
          url "https://bcrypt.sourceforge.io/bcrypt-1.1.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?bcrypt[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            system "make", "CC=#{ENV.cc}",
                           "CFLAGS=#{ENV.cflags}",
                           "LDFLAGS=-lz"
            bin.install "bcrypt"
            man1.install Utils::Gzip.compress("bcrypt.1")
          end
          test do
            (testpath/"test.txt").write("Hello World!")
            pipe_output("#{bin}/bcrypt -r test.txt", "12345678\n12345678\n")
            mv "test.txt.bfe", "test.out.txt.bfe"
            pipe_output("#{bin}/bcrypt -r test.out.txt.bfe", "12345678\n")
            assert_equal File.read("test.txt"), File.read("test.out.txt")
          end
        end



    Here's an example formula in the yml format for the project bcrypt:


        distributable:
          url: https://bcrypt.sourceforge.net/bcrypt-{{version.marketing}}.tar.gz
          strip-components: 1

        versions:
          - 1.1.0

        dependencies:
          zlib.net: '*'

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            make LDFLAGS=-lz PREFIX={{prefix}} install

        provides:
          - bin/bcrypt

        test:
          script: |
            echo "Hello World!" > test.txt
            printf '12345678\n12345678\n' | bcrypt -r test.txt
            mv test.txt.bfe test.out.txt.bfe
            printf '12345678\n' | bcrypt -r test.out.txt.bfe
            cat test.out.txt




    Here's an example ruby formula for the project libfido2:


        class Libfido2 < Formula
          homepage "https://developers.yubico.com/libfido2/"
          url "https://github.com/Yubico/libfido2/archive/1.13.0.tar.gz"
          depends_on "cmake" => :build
          depends_on "mandoc" => :build
          depends_on "pkg-config" => :build
          depends_on "libcbor"
          depends_on "openssl@1.1"
          on_linux do
            depends_on "systemd" # for libudev
          end
          def install
            args = std_cmake_args
            args << "-DUDEV_RULES_DIR=#{lib}/udev/rules.d" if OS.linux?
            mkdir "build" do
              system "cmake", "..", *args
              system "make"
              system "make", "man_symlink_html"
              system "make", "man_symlink"
              system "make", "install"
            end
          end
          test do
            (testpath/"test.c").write <<-EOF
            #include <stddef.h>
            #include <stdio.h>
            #include <fido.h>
            int main(void) {
              fido_init(FIDO_DEBUG);
              // Attempt to enumerate up to five FIDO/U2F devices. Five is an arbitrary number.
              size_t max_devices = 5;
              fido_dev_info_t *devlist;
              if ((devlist = fido_dev_info_new(max_devices)) == NULL)
                return 1;
              size_t found_devices = 0;
              int error;
              if ((error = fido_dev_info_manifest(devlist, max_devices, &found_devices)) == FIDO_OK)
                printf("FIDO/U2F devices found: %s\\n", found_devices ? "Some" : "None");
              fido_dev_info_free(&devlist, max_devices);
            }
            EOF
            system ENV.cc, "test.c", "-I#{include}", "-I#{Formula["openssl@1.1"].include}", "-o", "test",
                           "-L#{lib}", "-lfido2"
            system "./test"
          end
        end



    Based on the examples provided, write a formula for the project libfido2 in the yml format:
