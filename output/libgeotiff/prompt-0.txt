You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bcrypt:


        class Bcrypt < Formula
          homepage "https://bcrypt.sourceforge.io/"
          url "https://bcrypt.sourceforge.io/bcrypt-1.1.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?bcrypt[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            system "make", "CC=#{ENV.cc}",
                           "CFLAGS=#{ENV.cflags}",
                           "LDFLAGS=-lz"
            bin.install "bcrypt"
            man1.install Utils::Gzip.compress("bcrypt.1")
          end
          test do
            (testpath/"test.txt").write("Hello World!")
            pipe_output("#{bin}/bcrypt -r test.txt", "12345678\n12345678\n")
            mv "test.txt.bfe", "test.out.txt.bfe"
            pipe_output("#{bin}/bcrypt -r test.out.txt.bfe", "12345678\n")
            assert_equal File.read("test.txt"), File.read("test.out.txt")
          end
        end



    Here's an example formula in the yml format for the project bcrypt:


        distributable:
          url: https://bcrypt.sourceforge.net/bcrypt-{{version.marketing}}.tar.gz
          strip-components: 1

        versions:
          - 1.1.0

        dependencies:
          zlib.net: '*'

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            make LDFLAGS=-lz PREFIX={{prefix}} install

        provides:
          - bin/bcrypt

        test:
          script: |
            echo "Hello World!" > test.txt
            printf '12345678\n12345678\n' | bcrypt -r test.txt
            mv test.txt.bfe test.out.txt.bfe
            printf '12345678\n' | bcrypt -r test.out.txt.bfe
            cat test.out.txt




    Here's an example ruby formula for the project libgeotiff:


        class Libgeotiff < Formula
          homepage "https://github.com/OSGeo/libgeotiff"
          revision 2
          stable do
            url "https://github.com/OSGeo/libgeotiff/releases/download/1.7.1/libgeotiff-1.7.1.tar.gz"
            # Fix -flat_namespace being used on Big Sur and later.
            patch do
              url "https://raw.githubusercontent.com/Homebrew/formula-patches/03cf8088210822aa2c1ab544ed58ea04c897d9c4/libtool/configure-big_sur.diff"
            end
          end
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          head do
            url "https://github.com/OSGeo/libgeotiff.git", branch: "master"
            depends_on "autoconf" => :build
            depends_on "automake" => :build
            depends_on "libtool" => :build
          end
          depends_on "jpeg-turbo"
          depends_on "libtiff"
          depends_on "proj"
          def install
            system "./autogen.sh" if build.head?
            system "./configure", *std_configure_args, "--with-jpeg"
            system "make" # Separate steps or install fails
            system "make", "install"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include "geotiffio.h"
              #include "xtiffio.h"
              #include <stdlib.h>
              #include <string.h>
              int main(int argc, char* argv[])
              {
                TIFF *tif = XTIFFOpen(argv[1], "w");
                GTIF *gtif = GTIFNew(tif);
                TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, (uint32) 10);
                GTIFKeySet(gtif, GeogInvFlatteningGeoKey, TYPE_DOUBLE, 1, (double)123.456);
                int i;
                char buffer[20L];
                memset(buffer,0,(size_t)20L);
                for (i=0;i<20L;i++){
                  TIFFWriteScanline(tif, buffer, i, 0);
                }
                GTIFWriteKeys(gtif);
                GTIFFree(gtif);
                XTIFFClose(tif);
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-I#{include}", "-L#{lib}", "-lgeotiff",
                           "-L#{Formula["libtiff"].opt_lib}", "-ltiff", "-o", "test"
            system "./test", "test.tif"
            output = shell_output("#{bin}/listgeo test.tif")
            assert_match(/GeogInvFlatteningGeoKey.*123\.456/, output)
          end
        end



    Based on the examples provided, write a formula for the project libgeotiff in the yml format:
