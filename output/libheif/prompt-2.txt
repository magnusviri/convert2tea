wumpus

class Wumpus < Formula
  homepage "http://www.catb.org/~esr/wumpus/"
  url "http://www.catb.org/~esr/wumpus/wumpus-1.9.tar.gz"
  livecheck do
    url :homepage
    regex(/href=.*?wumpus[._-]v?(\d+(?:\.\d+)+)\.t/i)
  end
  def install
    system "make"
    system "make", "prefix=#{prefix}", "install"
  end
  test do
    assert_match("HUNT THE WUMPUS",
                 pipe_output(bin/"wumpus", "^C"))
  end
end


distributable:
  url: https://gitlab.com/esr/wumpus/-/archive/{{ version.raw }}/wumpus-{{ version.raw }}.tar.gz
  strip-components: 1

versions:
  - 1.9

provides:
  - bin/wumpus
  - bin/superhack

build:
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    #pagure.io/xmlto: '*'

  script: |
    make wumpus superhack
    # When xmlto is packaged then switch the to `make ... install`
    mkdir -p "{{prefix}}"/bin
    mv wumpus superhack "{{prefix}}"/bin
    # make prefix={{prefix}} install

test:
  script: |
    wumpus > wumpus.out &
    superhack > superhack.out &
    sleep 1
    test "x$(head -n1 wumpus.out)" = "xINSTRUCTIONS (Y-N)" && \
    test "x$(head -n1 superhack.out)" = "xHunt the Superhack"


class Libheif < Formula
  homepage "https://www.libde265.org/"
  url "https://github.com/strukturag/libheif/releases/download/v1.15.2/libheif-1.15.2.tar.gz"
  depends_on "pkg-config" => :build
  depends_on "aom"
  depends_on "jpeg-turbo"
  depends_on "libde265"
  depends_on "libpng"
  depends_on "shared-mime-info"
  depends_on "x265"
  def install
    system "./configure", *std_configure_args, "--disable-silent-rules"
    system "make", "install"
    pkgshare.install "examples/example.heic"
    pkgshare.install "examples/example.avif"
  end
  def post_install
    system Formula["shared-mime-info"].opt_bin/"update-mime-database", "#{HOMEBREW_PREFIX}/share/mime"
  end
  test do
    output = "File contains 2 images"
    example = pkgshare/"example.heic"
    exout = testpath/"exampleheic.jpg"
    assert_match output, shell_output("#{bin}/heif-convert #{example} #{exout}")
    assert_predicate testpath/"exampleheic-1.jpg", :exist?
    assert_predicate testpath/"exampleheic-2.jpg", :exist?
    output = "File contains 1 image"
    example = pkgshare/"example.avif"
    exout = testpath/"exampleavif.jpg"
    assert_match output, shell_output("#{bin}/heif-convert #{example} #{exout}")
    assert_predicate testpath/"exampleavif.jpg", :exist?
  end
end


libheif