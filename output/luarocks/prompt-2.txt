jansson

class Jansson < Formula
  homepage "https://digip.org/jansson/"
  url "https://github.com/akheron/jansson/releases/download/v2.14/jansson-2.14.tar.gz"
  def install
    system "./configure", *std_configure_args
    system "make", "install"
  end
  test do
    (testpath/"test.c").write <<~EOS
      #include <jansson.h>
      #include <assert.h>
      int main()
      {
        json_t *json;
        json_error_t error;
        json = json_loads("\\"foo\\"", JSON_DECODE_ANY, &error);
        assert(json && json_is_string(json));
        json_decref(json);
        return 0;
      }
    EOS
    system ENV.cc, "test.c", "-L#{lib}", "-ljansson", "-o", "test"
    system "./test"
  end
end


distributable:
  url: https://github.com/akheron/jansson/releases/download/v{{ version.raw }}/jansson-{{ version.raw }}.tar.gz
  strip-components: 1

versions:
  github: akheron/jansson/tags
  strip: /^v/

build:
  dependencies:
    linux:
      gnu.org/gcc: '*'
    darwin:
      tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
  script: |
    ./configure --prefix="{{prefix}}"
    make --jobs {{ hw.concurrency }} install

test:
  dependencies:
    tea.xyz/gx/cc: c99
  script: |
    cc fixture.c -ljansson
    ./a.out

class Luarocks < Formula
  homepage "https://luarocks.org/"
  url "https://luarocks.org/releases/luarocks-3.9.2.tar.gz"
  head "https://github.com/luarocks/luarocks.git", branch: "master"
  livecheck do
    url :homepage
    regex(%r{/luarocks[._-]v?(\d+(?:\.\d+)+)\.t}i)
  end
  depends_on "lua@5.3" => :test
  depends_on "luajit" => :test
  depends_on "lua"
  uses_from_macos "unzip"
  def install
    system "./configure", "--prefix=#{prefix}",
                          "--sysconfdir=#{etc}",
                          "--rocks-tree=#{HOMEBREW_PREFIX}"
    system "make", "install"
  end
  def caveats
    <<~EOS
      LuaRocks supports multiple versions of Lua. By default it is configured
      to use Lua#{Formula["lua"].version.major_minor}, but you can require it to use another version at runtime
      with the `--lua-dir` flag, like this:
        luarocks --lua-dir=#{Formula["lua@5.3"].opt_prefix} install say
    EOS
  end
  test do
    luas = [
      Formula["lua"],
      Formula["lua@5.3"],
    ]
    luas.each do |lua|
      luaversion = lua.version.major_minor
      luaexec = "#{lua.bin}/lua-#{luaversion}"
      ENV["LUA_PATH"] = "#{testpath}/share/lua/#{luaversion}/?.lua"
      ENV["LUA_CPATH"] = "#{testpath}/lib/lua/#{luaversion}/?.so"
      system "#{bin}/luarocks", "install",
                                "luafilesystem",
                                "--tree=#{testpath}",
                                "--lua-dir=#{lua.opt_prefix}"
      system luaexec, "-e", "require('lfs')"
      case luaversion
      when "5.1"
        (testpath/"lfs_#{luaversion}test.lua").write <<~EOS
          require("lfs")
          lfs.mkdir("blank_space")
        EOS
        system luaexec, "lfs_#{luaversion}test.lua"
        assert_predicate testpath/"blank_space", :directory?,
          "Luafilesystem failed to create the expected directory"
        # LuaJIT is compatible with lua5.1, so we can also test it here
        rmdir testpath/"blank_space"
        system Formula["luajit"].bin/"luajit", "lfs_#{luaversion}test.lua"
        assert_predicate testpath/"blank_space", :directory?,
          "Luafilesystem failed to create the expected directory"
      else
        (testpath/"lfs_#{luaversion}test.lua").write <<~EOS
          require("lfs")
          print(lfs.currentdir())
        EOS
        assert_match testpath.to_s, shell_output("#{luaexec} lfs_#{luaversion}test.lua")
      end
    end
  end
end


luarocks