You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project boost:


        class Boost < Formula
          homepage "https://www.boost.org/"
          url "https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.bz2"
          revision 1
          head "https://github.com/boostorg/boost.git", branch: "master"
          livecheck do
            url "https://www.boost.org/users/download/"
            regex(/href=.*?boost[._-]v?(\d+(?:[._]\d+)+)\.t/i)
            strategy :page_match do |page, regex|
              page.scan(regex).map { |match| match.first.tr("_", ".") }
            end
          end
          depends_on "icu4c"
          depends_on "xz"
          depends_on "zstd"
          uses_from_macos "bzip2"
          uses_from_macos "zlib"
          def install
            # Force boost to compile with the desired compiler
            open("user-config.jam", "a") do |file|
              if OS.mac?
                file.write "using darwin : : #{ENV.cxx} ;\n"
              else
                file.write "using gcc : : #{ENV.cxx} ;\n"
              end
            end
            # libdir should be set by --prefix but isn't
            icu4c_prefix = Formula["icu4c"].opt_prefix
            bootstrap_args = %W[
              --prefix=#{prefix}
              --libdir=#{lib}
              --with-icu=#{icu4c_prefix}
            ]
            # Handle libraries that will not be built.
            without_libraries = ["python", "mpi"]
            # Boost.Log cannot be built using Apple GCC at the moment. Disabled
            # on such systems.
            without_libraries << "log" if ENV.compiler == :gcc
            bootstrap_args << "--without-libraries=#{without_libraries.join(",")}"
            # layout should be synchronized with boost-python and boost-mpi
            args = %W[
              --prefix=#{prefix}
              --libdir=#{lib}
              -d2
              -j#{ENV.make_jobs}
              --layout=tagged-1.66
              --user-config=user-config.jam
              install
              threading=multi,single
              link=shared,static
            ]
            # Boost is using "clang++ -x c" to select C compiler which breaks C++14
            # handling using ENV.cxx14. Using "cxxflags" and "linkflags" still works.
            args << "cxxflags=-std=c++14"
            args << "cxxflags=-stdlib=libc++" << "linkflags=-stdlib=libc++" if ENV.compiler == :clang
            system "./bootstrap.sh", *bootstrap_args
            system "./b2", "headers"
            system "./b2", *args
          end
          test do
            (testpath/"test.cpp").write <<~EOS
              #include <boost/algorithm/string.hpp>
              #include <boost/iostreams/device/array.hpp>
              #include <boost/iostreams/device/back_inserter.hpp>
              #include <boost/iostreams/filter/zstd.hpp>
              #include <boost/iostreams/filtering_stream.hpp>
              #include <boost/iostreams/stream.hpp>
              #include <string>
              #include <iostream>
              #include <vector>
              #include <assert.h>
              using namespace boost::algorithm;
              using namespace boost::iostreams;
              using namespace std;
              int main()
              {
                string str("a,b");
                vector<string> strVec;
                split(strVec, str, is_any_of(","));
                assert(strVec.size()==2);
                assert(strVec[0]=="a");
                assert(strVec[1]=="b");
                // Test boost::iostreams::zstd_compressor() linking
                std::vector<char> v;
                back_insert_device<std::vector<char>> snk{v};
                filtering_ostream os;
                os.push(zstd_compressor());
                os.push(snk);
                os << "Boost" << std::flush;
                os.pop();
                array_source src{v.data(), v.size()};
                filtering_istream is;
                is.push(zstd_decompressor());
                is.push(src);
                std::string s;
                is >> s;
                assert(s == "Boost");
                return 0;
              }
            EOS
            system ENV.cxx, "test.cpp", "-std=c++14", "-o", "test", "-L#{lib}", "-lboost_iostreams",
                            "-L#{Formula["zstd"].opt_lib}", "-lzstd"
            system "./test"
          end
        end



    Here's an example formula in the yml format for the project boost:


        distributable:
          url: https://boostorg.jfrog.io/artifactory/main/release/{{ version }}/source/boost_{{version.major}}_{{version.minor}}_{{version.patch}}.tar.gz
          strip-components: 1

        versions:
          github: boostorg/boost
          strip: /^boost-/

        dependencies:
          facebook.com/zstd: ^1

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            ./bootstrap.sh --prefix={{ prefix }}
            ./b2 install --prefix={{ prefix }}

        test:
          dependencies:
            tea.xyz/gx/cc: c99
          script: |
            c++ test.cpp -std=c++14 -lboost_iostreams -lzstd
            ./a.out



    Here's an example ruby formula for the project mandoc:


        class Mandoc < Formula
          homepage "https://mandoc.bsd.lv/"
          url "https://mandoc.bsd.lv/snapshots/mandoc-1.14.6.tar.gz"
          revision 1
          head "anoncvs@mandoc.bsd.lv:/cvs", using: :cvs
          livecheck do
            url "https://mandoc.bsd.lv/snapshots/"
            regex(/href=.*?mandoc[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            localconfig = [
              # Sane prefixes.
              "PREFIX=#{prefix}",
              "INCLUDEDIR=#{include}",
              "LIBDIR=#{lib}",
              "MANDIR=#{man}",
              "WWWPREFIX=#{prefix}/var/www",
              "EXAMPLEDIR=#{share}/examples",
              # Executable names, where utilities would be replaced/duplicated.
              # The mandoc versions of the utilities are definitely *not* ready
              # for prime-time on Darwin, though some changes in HEAD are promising.
              # The "bsd" prefix (like bsdtar, bsdmake) is more informative than "m".
              "BINM_MAN=bsdman",
              "BINM_APROPOS=bsdapropos",
              "BINM_WHATIS=bsdwhatis",
              "BINM_MAKEWHATIS=bsdmakewhatis", # default is "makewhatis".
              "BINM_SOELIM=bsdsoelim", # conflicts with groff's soelim
              # These are names for *section 7* pages only. Several other pages are
              # prefixed "mandoc_", similar to the "groff_" pages.
              "MANM_MAN=man",
              "MANM_MDOC=mdoc",
              "MANM_ROFF=mandoc_roff", # This is the only one that conflicts (groff).
              "MANM_EQN=eqn",
              "MANM_TBL=tbl",
              "OSNAME='Mac OS X #{MacOS.version}'", # Bottom corner signature line.
              # Not quite sure what to do here. The default ("/usr/share", etc.) needs
              # sudoer privileges, or will error. So just brew's manpages for now?
              "MANPATH_DEFAULT=#{HOMEBREW_PREFIX}/share/man",
              "HAVE_MANPATH=0",   # Our `manpath` is a symlink to system `man`.
              "STATIC=",          # No static linking on Darwin.
              "HOMEBREWDIR=#{HOMEBREW_CELLAR}", # ? See configure.local.example, NEWS.
              "BUILD_CGI=1",
            ]
            File.rename("cgi.h.example", "cgi.h") # For man.cgi
            (buildpath/"configure.local").write localconfig.join("\n")
            system "./configure"
            # I've tried twice to send a bug report on this to tech@mdocml.bsd.lv.
            # In theory, it should show up with:
            # search.gmane.org/?query=jobserver&group=gmane.comp.tools.mdocml.devel
            ENV.deparallelize do
              system "make"
              system "make", "install"
            end
          end
          test do
            system "#{bin}/mandoc", "-Thtml",
              "-Ostyle=#{share}/examples/example.style.css", "#{man1}/mandoc.1"
          end
        end



    Based on the examples provided, write a formula for the project mandoc in the yml format:
