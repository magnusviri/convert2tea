You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project mpdecimal:


        class Mpdecimal < Formula
          homepage "https://www.bytereef.org/mpdecimal/"
          url "https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-2.5.1.tar.gz"
          livecheck do
            url "https://www.bytereef.org/mpdecimal/download.html"
            regex(/href=.*?mpdecimal[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          def install
            system "./configure", "--prefix=#{prefix}"
            system "make"
            system "make", "install"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <assert.h>
              #include <mpdecimal.h>
              #include <string.h>
              int main() {
                mpd_context_t ctx;
                mpd_t *a, *b, *result;
                char *rstring;
                mpd_defaultcontext(&ctx);
                a = mpd_new(&ctx);
                b = mpd_new(&ctx);
                result = mpd_new(&ctx);
                mpd_set_string(a, "0.1", &ctx);
                mpd_set_string(b, "0.2", &ctx);
                mpd_add(result, a, b, &ctx);
                rstring = mpd_to_sci(result, 1);
                assert(strcmp(rstring, "0.3") == 0);
                mpd_del(a);
                mpd_del(b);
                mpd_del(result);
                mpd_free(rstring);
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-o", "test", "-L#{lib}", "-lmpdec"
            system "./test"
          end
        end



    Here's an example formula in the yml format for the project mpdecimal:


        distributable:
          url: https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-{{ version }}.tar.gz
          strip-components: 1

        versions:
          - 2.5.1

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            ./configure --prefix={{ prefix }}
            make --jobs {{hw.concurrency}} install
            rm -rf {{prefix}}/share  # docs are online

            if test {{hw.platform}} = darwin; then
              install_name_tool -change \
                @rpath/libmpdec.3.dylib \
                @loader_path/libmpdec.3.dylib \
                {{prefix}}/lib/libmpdec++.dylib
            fi

        test:
          dependencies:
            tea.xyz/gx/cc: c99
          script: |
            cc test.c -o test -lmpdec
            ./test



    Here's an example ruby formula for the project mariadb:


        class Mariadb < Formula
          homepage "https://mariadb.org/"
          url "https://downloads.mariadb.com/MariaDB/mariadb-10.11.2/source/mariadb-10.11.2.tar.gz"
          # This uses a placeholder regex to satisfy the `PageMatch` strategy
          # requirement. In the future, this will be updated to use a `Json` strategy
          # and we can remove the unused regex at that time.
          livecheck do
            url "https://downloads.mariadb.org/rest-api/mariadb/all-releases/?olderReleases=false"
            regex(/unused/i)
            strategy :page_match do |page|
              json = JSON.parse(page)
              json["releases"]&.map do |release|
                release["status"].include?("stable") ? release["release_number"] : nil
              end
            end
          end
          depends_on "bison" => :build
          depends_on "cmake" => :build
          depends_on "fmt" => :build
          depends_on "pkg-config" => :build
          depends_on "groonga"
          depends_on "openssl@1.1"
          depends_on "pcre2"
          depends_on "zstd"
          uses_from_macos "bzip2"
          uses_from_macos "libxcrypt"
          uses_from_macos "libxml2"
          uses_from_macos "ncurses"
          uses_from_macos "zlib"
          on_linux do
            depends_on "linux-pam"
            depends_on "readline" # uses libedit on macOS
          end
          conflicts_with "mysql", "percona-server",
            because: "mariadb, mysql, and percona install the same binaries"
          conflicts_with "mytop", because: "both install `mytop` binaries"
          conflicts_with "mariadb-connector-c", because: "both install `mariadb_config`"
          fails_with gcc: "5"
          def install
            ENV.cxx11
            # Set basedir and ldata so that mysql_install_db can find the server
            # without needing an explicit path to be set. This can still
            # be overridden by calling --basedir= when calling.
            inreplace "scripts/mysql_install_db.sh" do |s|
              s.change_make_var! "basedir", "\"#{prefix}\""
              s.change_make_var! "ldata", "\"#{var}/mysql\""
            end
            # Use brew groonga
            rm_r "storage/mroonga/vendor/groonga"
            # -DINSTALL_* are relative to prefix
            args = %W[
              -DMYSQL_DATADIR=#{var}/mysql
              -DINSTALL_INCLUDEDIR=include/mysql
              -DINSTALL_MANDIR=share/man
              -DINSTALL_DOCDIR=share/doc/#{name}
              -DINSTALL_INFODIR=share/info
              -DINSTALL_MYSQLSHAREDIR=share/mysql
              -DWITH_LIBFMT=system
              -DWITH_SSL=system
              -DWITH_UNIT_TESTS=OFF
              -DDEFAULT_CHARSET=utf8mb4
              -DDEFAULT_COLLATION=utf8mb4_general_ci
              -DINSTALL_SYSCONFDIR=#{etc}
              -DCOMPILATION_COMMENT=#{tap.user}
            ]
            if OS.linux?
              args << "-DWITH_NUMA=OFF"
              args << "-DENABLE_DTRACE=NO"
              args << "-DCONNECT_WITH_JDBC=OFF"
            end
            # Disable RocksDB on Apple Silicon (currently not supported)
            args << "-DPLUGIN_ROCKSDB=NO" if Hardware::CPU.arm?
            system "cmake", "-S", ".", "-B", "_build", *std_cmake_args, *args
            system "cmake", "--build", "_build"
            system "cmake", "--install", "_build"
            # Fix my.cnf to point to #{etc} instead of /etc
            (etc/"my.cnf.d").mkpath
            inreplace "#{etc}/my.cnf", "!includedir /etc/my.cnf.d",
                                       "!includedir #{etc}/my.cnf.d"
            touch etc/"my.cnf.d/.homebrew_dont_prune_me"
            # Don't create databases inside of the prefix!
            # See: https://github.com/Homebrew/homebrew/issues/4975
            rm_rf prefix/"data"
            # Save space
            (prefix/"mysql-test").rmtree
            (prefix/"sql-bench").rmtree
            # Link the setup script into bin
            bin.install_symlink prefix/"scripts/mysql_install_db"
            # Fix up the control script and link into bin
            inreplace "#{prefix}/support-files/mysql.server", /^(PATH=".*)(")/, "\\1:#{HOMEBREW_PREFIX}/bin\\2"
            bin.install_symlink prefix/"support-files/mysql.server"
            # Move sourced non-executable out of bin into libexec
            libexec.install "#{bin}/wsrep_sst_common"
            # Fix up references to wsrep_sst_common
            %w[
              wsrep_sst_mysqldump
              wsrep_sst_rsync
              wsrep_sst_mariabackup
            ].each do |f|
              inreplace "#{bin}/#{f}", "$(dirname \"$0\")/wsrep_sst_common",
                                       "#{libexec}/wsrep_sst_common"
            end
            # Install my.cnf that binds to 127.0.0.1 by default
            (buildpath/"my.cnf").write <<~EOS
              # Default Homebrew MySQL server config
              [mysqld]
              # Only allow connections from localhost
              bind-address = 127.0.0.1
            EOS
            etc.install "my.cnf"
          end
          def post_install
            # Make sure the var/mysql directory exists
            (var/"mysql").mkpath
            # Don't initialize database, it clashes when testing other MySQL-like implementations.
            return if ENV["HOMEBREW_GITHUB_ACTIONS"]
            unless File.exist? "#{var}/mysql/mysql/user.frm"
              ENV["TMPDIR"] = nil
              system "#{bin}/mysql_install_db", "--verbose", "--user=#{ENV["USER"]}",
                "--basedir=#{prefix}", "--datadir=#{var}/mysql", "--tmpdir=/tmp"
            end
          end
          def caveats
            <<~EOS
              A "/etc/my.cnf" from another install may interfere with a Homebrew-built
              server starting up correctly.
              MySQL is configured to only allow connections from localhost by default
            EOS
          end
          service do
            run [opt_bin/"mysqld_safe", "--datadir=#{var}/mysql"]
            keep_alive true
            working_dir var
          end
          test do
            (testpath/"mysql").mkpath
            (testpath/"tmp").mkpath
            system bin/"mysql_install_db", "--no-defaults", "--user=#{ENV["USER"]}",
              "--basedir=#{prefix}", "--datadir=#{testpath}/mysql", "--tmpdir=#{testpath}/tmp",
              "--auth-root-authentication-method=normal"
            port = free_port
            fork do
              system "#{bin}/mysqld", "--no-defaults", "--user=#{ENV["USER"]}",
                "--datadir=#{testpath}/mysql", "--port=#{port}", "--tmpdir=#{testpath}/tmp"
            end
            sleep 5
            assert_match "information_schema",
              shell_output("#{bin}/mysql --port=#{port} --user=root --password= --execute='show databases;'")
            system "#{bin}/mysqladmin", "--port=#{port}", "--user=root", "--password=", "shutdown"
          end
        end



    Based on the examples provided, write a formula for the project mariadb in the yml format:
