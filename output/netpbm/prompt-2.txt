You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project wumpus:


        class Wumpus < Formula
          homepage "http://www.catb.org/~esr/wumpus/"
          url "http://www.catb.org/~esr/wumpus/wumpus-1.9.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?wumpus[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          def install
            system "make"
            system "make", "prefix=#{prefix}", "install"
          end
          test do
            assert_match("HUNT THE WUMPUS",
                         pipe_output(bin/"wumpus", "^C"))
          end
        end



    Here's an example formula in the yml format for the project wumpus:


        distributable:
          url: http://www.catb.org/~esr/wumpus/wumpus-1.7.tar.gz
          strip-components: 1

        # When https://gitlab.com/esr/wumpus/-/merge_requests/3 is merged, then switch to
        #   https://gitlab.com/esr/wumpus/-/archive/{{ version.raw }}/wumpus-{{ version.raw }}.tar.gz

        versions:
          - 1.7

        # TODO: Is there a gitlab version provider?

        provides:
          - bin/wumpus
          - bin/superhack

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'

          script: |
            make
            make prefix={{prefix}} install

        test:
          script: echo no way to test this



    Here's an example ruby formula for the project netpbm:


        class Netpbm < Formula
          homepage "https://netpbm.sourceforge.io/"
          # Maintainers: Look at https://sourceforge.net/p/netpbm/code/HEAD/tree/
          # for stable versions and matching revisions.
          url "https://svn.code.sf.net/p/netpbm/code/stable", revision: "4534"
          version "10.86.38"
          version_scheme 1
          head "https://svn.code.sf.net/p/netpbm/code/trunk"
          livecheck do
            url "https://sourceforge.net/p/netpbm/code/HEAD/tree/stable/"
            regex(/Release v?(\d+(?:\.\d+)+)/i)
            strategy :page_match
          end
          depends_on "jasper"
          depends_on "jpeg-turbo"
          depends_on "libpng"
          depends_on "libtiff"
          uses_from_macos "flex" => :build
          uses_from_macos "libxml2"
          uses_from_macos "zlib"
          conflicts_with "jbigkit", because: "both install `pbm.5` and `pgm.5` files"
          def install
            cp "config.mk.in", "config.mk"
            inreplace "config.mk" do |s|
              s.remove_make_var! "CC"
              s.change_make_var! "TIFFLIB", "-ltiff"
              s.change_make_var! "JPEGLIB", "-ljpeg"
              s.change_make_var! "PNGLIB", "-lpng"
              s.change_make_var! "ZLIB", "-lz"
              s.change_make_var! "JASPERLIB", "-ljasper"
              s.change_make_var! "JASPERHDR_DIR", Formula["jasper"].opt_include/"jasper"
              s.gsub! "/usr/local/netpbm/rgb.txt", prefix/"misc/rgb.txt"
              if OS.mac?
                s.change_make_var! "CFLAGS_SHLIB", "-fno-common"
                s.change_make_var! "NETPBMLIBTYPE", "dylib"
                s.change_make_var! "NETPBMLIBSUFFIX", "dylib"
                s.change_make_var! "LDSHLIB", "--shared -o $(SONAME)"
              else
                s.change_make_var! "CFLAGS_SHLIB", "-fPIC"
              end
            end
            ENV.deparallelize
            system "make"
            system "make", "package", "pkgdir=#{buildpath}/stage"
            cd "stage" do
              inreplace "pkgconfig_template" do |s|
                s.gsub! "@VERSION@", File.read("VERSION").sub("Netpbm ", "").chomp
                s.gsub! "@LINKDIR@", lib
                s.gsub! "@INCLUDEDIR@", include
              end
              prefix.install %w[bin include lib misc]
              lib.install buildpath.glob("staticlink/*.a"), buildpath.glob("sharedlink/#{shared_library("*")}")
              (lib/"pkgconfig").install "pkgconfig_template" => "netpbm.pc"
            end
          end
          test do
            fwrite = shell_output("#{bin}/pngtopam #{test_fixtures("test.png")} -alphapam")
            (testpath/"test.pam").write fwrite
            system bin/"pamdice", "test.pam", "-outstem", testpath/"testing"
            assert_predicate testpath/"testing_0_0.pam", :exist?
            (testpath/"test.xpm").write <<~EOS
              /* XPM */
              static char * favicon_xpm[] = {
              "16 16 4 1",
              " 	c white",
              ".	c blue",
              "X	c black",
              "o	c red",
              "                ",
              "                ",
              "                ",
              "                ",
              "  ....    ....  ",
              " .    .  .    . ",
              ".  ..  ..  ..  .",
              "  .  . .. .  .  ",
              " .   XXXXXX   . ",
              " .   XXXXXX   . ",
              "oooooooooooooooo",
              "oooooooooooooooo",
              "oooooooooooooooo",
              "oooooooooooooooo",
              "XXXXXXXXXXXXXXXX",
              "XXXXXXXXXXXXXXXX"};
            EOS
            ppmout = shell_output("#{bin}/xpmtoppm test.xpm")
            refute_predicate ppmout, :empty?
          end
        end



    Based on the examples provided, write a formula for the project netpbm in the yml format:
