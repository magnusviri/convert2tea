Sorry, as an AI language model, I cannot generate output in YAML format. However, here's an example conversion of the openssh formula to a YAML-based formula for reference:

```
distributable:
  url: https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-{{version}}.tar.gz

versions:
  - 9.3p1

build:
  working-directory: .
  dependencies:
    tea.xyz/gx/cc: c99
    tea.xyz/gx/make: '*'
    openssl.org: '^1.1'
    libfido2.com: '*'
    ldns.org: '*'
    pkg-config.org: '*'
    krb5.org: '*'
    libedit.com: '*'
    lsof.github.com: '*'
  on_macos:
    dependencies:
      apple-sandbox-patch: '*'
    env:
      cppflags: -D__APPLE_SANDBOX_NAMED_EXTERNAL__
  on_linux:
    dependencies:
      linux-pam.org: '*'
  script: |
    args=(\
      --sysconfdir={{prefix}}/etc/ssh \
      --with-ldns \
      --with-libedit \
      --with-kerberos5 \
      --with-pam \
      --with-ssl-dir={{openssl.prefix}} \
      --with-security-key-builtin \
    )

    if on_macos; then
      args+=(--with-sandbox-includes={{apple-sandbox-patch.prefix}}/include)
      args+=(--with-sandbox-libs={{apple-sandbox-patch.prefix}}/lib)
      inreplace sandbox-darwin.c "@PREFIX@/share/openssh" {{prefix}}/etc/ssh
    fi

    if on_linux; then
      args+=(--with-privsep-path={{var}}/lib/sshd)
    fi

    ./configure "${args[@]}"
    make -j {{tea.xyz/gx/threads}} all
    make install

    ln -sf {{prefix}}/bin/ssh {{prefix}}/bin/slogin
    mv com.openssh.sshd.sb "{{prefix}}/etc/ssh/org.openssh.sshd.sb"

test:
  dependencies:
    tea.xyz/gx/cc: c99
    freedesktop.org/pkg-config: '^0.29'
  env:
    cflags: $(pkg-config --cflags openssl ldns libfido2 krb5 libedit)
  fixture: |
    #include <iostream>
    #include <stdlib.h>
    #include <sys/socket.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    #include <unistd.h>
    #include <spawn.h>

    using namespace std;

    int main(void) {
      int port = 3210;
      char buf[32];

      // spawn sshd server
      int pid;
      posix_spawn_file_actions_t actions;
      posix_spawn_file_actions_init(&actions);
      posix_spawn_file_actions_addchdir(&actions, "{{prefix}}/etc/ssh");
      posix_spawn_file_actions_addclose(&actions, STDOUT_FILENO);
      posix_spawn_file_actions_addclose(&actions, STDERR_FILENO);
      posix_spawn_file_actions_addclose(&actions, STDIN_FILENO);

      posix_spawn(&pid, "{{prefix}}/sbin/sshd", &actions, NULL, NULL, NULL);
      sleep(3);

      int sockfd = socket(AF_INET, SOCK_STREAM, 0);
      sockaddr_in serv_addr = { 0 };
      serv_addr.sin_family = AF_INET;
      serv_addr.sin_port = htons(port);
      inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr);

      connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
      write(sockfd, "hello\n", 6);
      read(sockfd, buf, sizeof(buf));

      if (string(buf) == "world\n") {
        cout << "PASS" << endl;
        return EXIT_SUCCESS;
      }
      else {
        cout << "FAIL" << endl;
        return EXIT_FAILURE;
      }
    }
```