You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project doxygen:


        class Doxygen < Formula
          homepage "https://www.doxygen.nl/"
          url "https://doxygen.nl/files/doxygen-1.9.6.src.tar.gz"
          mirror "https://downloads.sourceforge.net/project/doxygen/rel-1.9.6/doxygen-1.9.6.src.tar.gz"
          head "https://github.com/doxygen/doxygen.git", branch: "master"
          livecheck do
            url "https://www.doxygen.nl/download.html"
            regex(/href=.*?doxygen[._-]v?(\d+(?:\.\d+)+)[._-]src\.t/i)
          end
          depends_on "bison" => :build
          depends_on "cmake" => :build
          uses_from_macos "flex" => :build, since: :big_sur
          uses_from_macos "python" => :build
          fails_with :gcc do
            version "6"
            cause "Need gcc>=7.2. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66297"
          end
          def install
            system "cmake", "-S", ".", "-B", "build",
                            "-DPYTHON_EXECUTABLE=#{which("python3") || which("python")}",
                            *std_cmake_args
            system "cmake", "--build", "build"
            system "cmake", "--install", "build"
            system "cmake", "-S", ".", "-B", "build", "-Dbuild_doc=1", *std_cmake_args
            man1.install buildpath.glob("build/man/*.1")
          end
          test do
            system bin/"doxygen", "-g"
            system bin/"doxygen", "Doxyfile"
          end
        end



    Here's an example formula in the yml format for the project doxygen:



        distributable:
           url: https://github.com/doxygen/doxygen/archive/refs/tags/Release_{{version.major}}_{{version.minor}}_{{version.patch}}.tar.gz
           strip-components: 1

        versions:
          - 1.9.6 # FIXME: the versions are "Release_1_9_6" but no idea how I can parse this without regex

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            gnu.org/bison: ^3
            cmake.org: ^3
            github.com/westes/flex: 2
            python.org: ^3
          working-directory: build
          script: |
            cmake $ARGS -G "Unix Makefiles" ..
            make --jobs {{ hw.concurrency }} 
            make install
          env:
            ARGS:
              - -DCMAKE_INSTALL_PREFIX="{{prefix}}"
              - -DCMAKE_BUILD_TYPE=Release
            

        provides:
          - bin/doxygen

        test:
          script: |
            doxygen -g
            doxygen Doxyfile



    Here's an example ruby formula for the project poppler:


        class Poppler < Formula
          homepage "https://poppler.freedesktop.org/"
          url "https://poppler.freedesktop.org/poppler-23.03.0.tar.xz"
          head "https://gitlab.freedesktop.org/poppler/poppler.git", branch: "master"
          livecheck do
            url :homepage
            regex(/href=.*?poppler[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          depends_on "cmake" => :build
          depends_on "gobject-introspection" => :build
          depends_on "pkg-config" => :build
          depends_on "cairo"
          depends_on "fontconfig"
          depends_on "freetype"
          depends_on "gettext"
          depends_on "glib"
          depends_on "jpeg-turbo"
          depends_on "libpng"
          depends_on "libtiff"
          depends_on "little-cms2"
          depends_on "nspr"
          depends_on "nss"
          depends_on "openjpeg"
          uses_from_macos "gperf" => :build
          uses_from_macos "curl", since: :catalina # 7.55.0 required by poppler
          uses_from_macos "zlib"
          conflicts_with "pdftohtml", "pdf2image", "xpdf",
            because: "poppler, pdftohtml, pdf2image, and xpdf install conflicting executables"
          fails_with gcc: "5"
          def install
            ENV.cxx11
            # removes /usr/include from CFLAGS (not clear why)
            ENV["PKG_CONFIG_SYSTEM_INCLUDE_PATH"] = "/usr/include" if MacOS.version < :mojave
            args = std_cmake_args + %W[
              -DBUILD_GTK_TESTS=OFF
              -DENABLE_BOOST=OFF
              -DENABLE_CMS=lcms2
              -DENABLE_GLIB=ON
              -DENABLE_QT5=OFF
              -DENABLE_QT6=OFF
              -DENABLE_UNSTABLE_API_ABI_HEADERS=ON
              -DWITH_GObjectIntrospection=ON
              -DCMAKE_INSTALL_RPATH=#{rpath}
            ]
            system "cmake", "-S", ".", "-B", "build_shared", *args
            system "cmake", "--build", "build_shared"
            system "cmake", "--install", "build_shared"
            system "cmake", "-S", ".", "-B", "build_static", *args, "-DBUILD_SHARED_LIBS=OFF"
            system "cmake", "--build", "build_static"
            lib.install "build_static/libpoppler.a"
            lib.install "build_static/cpp/libpoppler-cpp.a"
            lib.install "build_static/glib/libpoppler-glib.a"
            resource("font-data").stage do
              system "make", "install", "prefix=#{prefix}"
            end
          end
          test do
            system bin/"pdfinfo", test_fixtures("test.pdf")
          end
        end



    Based on the examples provided, write a formula for the project poppler in the yml format:
