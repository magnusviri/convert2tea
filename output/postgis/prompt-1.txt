You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project aria2:


        class Aria2 < Formula
          homepage "https://aria2.github.io/"
          url "https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0.tar.xz"
          revision 1
          depends_on "pkg-config" => :build
          depends_on "gettext"
          depends_on "libssh2"
          depends_on "sqlite"
          uses_from_macos "libxml2"
          uses_from_macos "zlib"
          on_linux do
            depends_on "openssl@1.1"
          end
          def install
            ENV.cxx11
            args = %W[
              --disable-dependency-tracking
              --prefix=#{prefix}
              --with-libssh2
              --without-gnutls
              --without-libgmp
              --without-libnettle
              --without-libgcrypt
            ]
            if OS.mac?
              args << "--with-appletls"
              args << "--without-openssl"
            else
              args << "--without-appletls"
              args << "--with-openssl"
            end
            system "./configure", *args
            system "make", "install"
            bash_completion.install "doc/bash_completion/aria2c"
          end
          test do
            system "#{bin}/aria2c", "https://brew.sh/"
            assert_predicate testpath/"index.html", :exist?, "Failed to create index.html!"
          end
        end



    Here's an example formula in the yml format for the project aria2:


        distributable:
          url: https://github.com/aria2/aria2/releases/download/release-{{ version }}/aria2-{{ version }}.tar.xz
          strip-components: 1

        versions:
          github: aria2/aria2
          strip: /^aria2 /

        provides:
          - bin/aria2c

        dependencies:
          zlib.net: ^1
          openssl.org: ^1
          libexpat.github.io: '*'
          sqlite.org: ^3

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            gnupg.org/libgcrypt: ^1
            gnupg.org/libgpg-error: ^1
            freedesktop.org/pkg-config: '*'
          script: |
            ./configure $ARGS
            make --jobs {{hw.concurrency}}
            make install
          env:
            ARGS:
              - --prefix="{{prefix}}"
              - --with-openssl
              - --with-libgcrypt

        test: |
          aria2c -v
          aria2c https://tea.xyz
          aria2c --seed-time=0 "magnet:?xt=urn:btih:d984f67af9917b214cd8b6048ab5624c7df6a07a&tr=https%3A%2F%2Facademictorrents.com%2Fannounce.php&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce"


    Here's an example ruby formula for the project postgis:


        class Postgis < Formula
          homepage "https://postgis.net/"
          url "https://download.osgeo.org/postgis/source/postgis-3.3.2.tar.gz"
          revision 2
          livecheck do
            url "https://download.osgeo.org/postgis/source/"
            regex(/href=.*?postgis[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          head do
            url "https://git.osgeo.org/gitea/postgis/postgis.git", branch: "master"
            depends_on "autoconf" => :build
            depends_on "automake" => :build
            depends_on "libtool" => :build
          end
          depends_on "gpp" => :build
          depends_on "pkg-config" => :build
          depends_on "gdal" # for GeoJSON and raster handling
          depends_on "geos"
          depends_on "json-c" # for GeoJSON and raster handling
          depends_on "pcre2"
          depends_on "postgresql@14"
          depends_on "proj"
          depends_on "protobuf-c" # for MVT (map vector tiles) support
          depends_on "sfcgal" # for advanced 2D/3D functions
          fails_with gcc: "5"
          def postgresql
            Formula["postgresql@14"]
          end
          def install
            ENV.deparallelize
            ENV["PG_CONFIG"] = postgresql.opt_bin/"pg_config"
            args = [
              "--with-projdir=#{Formula["proj"].opt_prefix}",
              "--with-jsondir=#{Formula["json-c"].opt_prefix}",
              "--with-pgconfig=#{postgresql.opt_bin}/pg_config",
              "--with-protobufdir=#{Formula["protobuf-c"].opt_bin}",
              # Unfortunately, NLS support causes all kinds of headaches because
              # PostGIS gets all of its compiler flags from the PGXS makefiles. This
              # makes it nigh impossible to tell the buildsystem where our keg-only
              # gettext installations are.
              "--disable-nls",
            ]
            system "./autogen.sh" if build.head?
            # Fixes config/install-sh: No such file or directory
            # This is caused by a misalignment between ./configure in postgres@14 and postgis
            mv "build-aux", "config"
            inreplace %w[configure utils/Makefile.in] do |s|
              s.gsub! "build-aux", "config"
            end
            system "./configure", *args
            system "make"
            # Install to a staging directory to circumvent the hardcoded install paths
            # set by the PGXS makefiles.
            mkdir "stage"
            system "make", "install", "DESTDIR=#{buildpath}/stage"
            # Some files are stored in the stage directory with the cellar prefix of
            # the version of postgresql used to build postgis.  Since we copy these
            # files into the postgis keg and symlink them to HOMEBREW_PREFIX, postgis
            # only needs to be rebuilt when there is a new major version of postgresql.
            postgresql_prefix = postgresql.prefix.realpath
            postgresql_stage_path = File.join("stage", postgresql_prefix)
            bin.install (buildpath/postgresql_stage_path/"bin").children
            doc.install (buildpath/postgresql_stage_path/"share/doc").children
            stage_path = File.join("stage", HOMEBREW_PREFIX)
            lib.install (buildpath/stage_path/"lib").children
            share.install (buildpath/stage_path/"share").children
            # Extension scripts
            bin.install %w[
              utils/create_undef.pl
              utils/create_upgrade.pl
              utils/postgis_restore.pl
              utils/profile_intersects.pl
              utils/test_estimation.pl
              utils/test_geography_estimation.pl
              utils/test_geography_joinestimation.pl
              utils/test_joinestimation.pl
            ]
          end
          test do
            pg_version = postgresql.version.major
            expected = /'PostGIS built for PostgreSQL % cannot be loaded in PostgreSQL %',\s+#{pg_version}\.\d,/
            postgis_version = Formula["postgis"].version.major_minor
            assert_match expected, (share/postgresql.name/"contrib/postgis-#{postgis_version}/postgis.sql").read
            require "base64"
            (testpath/"brew.shp").write ::Base64.decode64 <<~EOS
              AAAnCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOgDAAALAAAAAAAAAAAAAAAA
              AAAAAADwPwAAAAAAABBAAAAAAAAAFEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
              AAAAAAAAAAAAAAAAAAEAAAASCwAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAAAA
              AAAAAAAAAAAAAAAAAgAAABILAAAAAAAAAAAACEAAAAAAAADwPwAAAAAAAAAA
              AAAAAAAAAAAAAAADAAAAEgsAAAAAAAAAAAAQQAAAAAAAAAhAAAAAAAAAAAAA
              AAAAAAAAAAAAAAQAAAASCwAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAA
              AAAAAAAAAAAABQAAABILAAAAAAAAAAAAAAAAAAAAAAAUQAAAAAAAACJAAAAA
              AAAAAEA=
            EOS
            (testpath/"brew.dbf").write ::Base64.decode64 <<~EOS
              A3IJGgUAAABhAFsAAAAAAAAAAAAAAAAAAAAAAAAAAABGSVJTVF9GTEQAAEMA
              AAAAMgAAAAAAAAAAAAAAAAAAAFNFQ09ORF9GTEQAQwAAAAAoAAAAAAAAAAAA
              AAAAAAAADSBGaXJzdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgIFBvaW50ICAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgICBQb2ludCAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgIFRoaXJkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgICAgUG9pbnQgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICBGb3VydGggICAgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgICAgIFBvaW50ICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgQXBwZW5kZWQgICAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAgICAgICBQb2ludCAgICAgICAgICAgICAgICAgICAgICAg
              ICAgICAgICAgICAg
            EOS
            (testpath/"brew.shx").write ::Base64.decode64 <<~EOS
              AAAnCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARugDAAALAAAAAAAAAAAAAAAA
              AAAAAADwPwAAAAAAABBAAAAAAAAAFEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
              AAAAAAAAAAAAAAAAADIAAAASAAAASAAAABIAAABeAAAAEgAAAHQAAAASAAAA
              igAAABI=
            EOS
            result = shell_output("#{bin}/shp2pgsql #{testpath}/brew.shp")
            assert_match "Point", result
            assert_match "AddGeometryColumn", result
            pg_ctl = postgresql.opt_bin/"pg_ctl"
            psql = postgresql.opt_bin/"psql"
            port = free_port
            system pg_ctl, "initdb", "-D", testpath/"test"
            (testpath/"test/postgresql.conf").write <<~EOS, mode: "a+"
              shared_preload_libraries = 'postgis-3'
              port = #{port}
            EOS
            system pg_ctl, "start", "-D", testpath/"test", "-l", testpath/"log"
            system psql, "-p", port.to_s, "-c", "CREATE EXTENSION \"postgis\";", "postgres"
            system pg_ctl, "stop", "-D", testpath/"test"
          end
        end



    Based on the examples provided, write a formula for the project postgis in the yml format:
