You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project cpanminus:


        class Cpanminus < Formula
          homepage "https://github.com/miyagawa/cpanminus"
          # Don't use git tags, their naming is misleading
          url "https://cpan.metacpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7046.tar.gz"
          license any_of: ["Artistic-1.0-Perl", "GPL-1.0-or-later"]
          version_scheme 1
          head "https://github.com/miyagawa/cpanminus.git", branch: "devel"
          uses_from_macos "perl"
          def install
            cd "App-cpanminus" if build.head?
            system "perl", "Makefile.PL", "INSTALL_BASE=#{prefix}",
                                          "INSTALLSITEMAN1DIR=#{man1}",
                                          "INSTALLSITEMAN3DIR=#{man3}"
            system "make", "install"
          end
          def post_install
            cpanm_lines = (bin/"cpanm").read.lines
            return if cpanm_lines.first.match?(%r{^#!/usr/bin/env perl})
            ohai "Adding `/usr/bin/env perl` shebang to `cpanm`..."
            cpanm_lines.unshift "#!/usr/bin/env perl\n"
            (bin/"cpanm").atomic_write cpanm_lines.join
          end
          test do
            assert_match "cpan.metacpan.org", stable.url, "Don't use git tags, their naming is misleading"
            system "#{bin}/cpanm", "--local-lib=#{testpath}/perl5", "Test::More"
          end
        end



    Here's an example formula in the yml format for the project cpanminus:


        distributable:
          url: https://cpan.metacpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-{{version.raw}}.tar.gz
          strip-components: 1

        versions:
          github: miyagawa/cpanminus/tags
          ignore:
            - /^1.9/   # invalid versions in the tags for some reason
            - /^1.79/  # ^^
            - /^1.71/  # ^^ like wtf?

        dependencies:
          perl.org: '*'

        companions:
          tea.xyz/gx/make: '*'

        provides:
          - bin/cpanm

        build:
          dependencies:
            tea.xyz/gx/make: '*'
          script: |
            perl Makefile.PL INSTALL_BASE={{prefix}}
            make install

            fix-shebangs.ts {{prefix}}/bin/cpanm

        test:
          dependencies:
            tea.xyz/gx/make: '*'
          script:
            cpanm --verbose --local-lib=./out Test::More



    Here's an example ruby formula for the project pulumi:


        class Pulumi < Formula
          homepage "https://pulumi.io/"
          url "https://github.com/pulumi/pulumi.git",
              tag:      "v3.60.0",
              revision: "7fdcd6792d2ed653e7ea2498b3615792a59a91a3"
          head "https://github.com/pulumi/pulumi.git", branch: "master"
          depends_on "go" => :build
          def install
            cd "./sdk" do
              system "go", "mod", "download"
            end
            cd "./pkg" do
              system "go", "mod", "download"
            end
            system "make", "brew"
            bin.install Dir["#{ENV["GOPATH"]}/bin/pulumi*"]
            # Install shell completions
            generate_completions_from_executable(bin/"pulumi", "gen-completion")
          end
          test do
            ENV["PULUMI_ACCESS_TOKEN"] = "local://"
            ENV["PULUMI_TEMPLATE_PATH"] = testpath/"templates"
            system "#{bin}/pulumi", "new", "aws-typescript", "--generate-only",
                                                             "--force", "-y"
            assert_predicate testpath/"Pulumi.yaml", :exist?, "Project was not created"
          end
        end



    Based on the examples provided, write a formula for the project pulumi in the yml format:
