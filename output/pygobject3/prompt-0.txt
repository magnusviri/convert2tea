You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project libslirp:


        class Libslirp < Formula
          homepage "https://gitlab.freedesktop.org/slirp/libslirp"
          url "https://gitlab.freedesktop.org/slirp/libslirp/-/archive/v4.7.0/libslirp-v4.7.0.tar.gz"
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          depends_on "glib"
          def install
            system "meson", "build", "-Ddefault_library=both", *std_meson_args
            system "ninja", "-C", "build", "install", "all"
          end
          test do
            (testpath/"test.c").write <<~EOS
              #include <stdio.h>
              #include <string.h>
              #include <stddef.h>
              #include <slirp/libslirp.h>
              int main() {
                SlirpConfig cfg;
                memset(&cfg, 0, sizeof(cfg));
                cfg.version = 1;
                cfg.in_enabled = true;
                cfg.vhostname = "testServer";
                Slirp* ctx = slirp_new(&cfg, NULL, NULL);
                return 0;
              }
            EOS
            system ENV.cc, "test.c", "-L#{lib}", "-lslirp", "-o", "test"
            system "./test"
          end
        end



    Here's an example formula in the yml format for the project libslirp:


        distributable:
          url: https://gitlab.freedesktop.org/slirp/libslirp/-/archive/v{{ version }}/libslirp-v{{ version }}.tar.gz
          strip-components: 1

        versions:
          - 4.7.0

        dependencies:
          gnome.org/glib: ^2

        build:
          dependencies:
            mesonbuild.com: ^0.63
            ninja-build.org: 1
            freedesktop.org/pkg-config: ^0.29
            tea.xyz/gx/cc: c99
          script: |
            meson build $ARGS
            ninja -C build install all
            cd "{{ prefix }}/lib"
            mv pkgconfig/* .
            rmdir pkgconfig
            ln -s . slirp
          env:
            ARGS:
              - -Ddefault_library=both 
              - --prefix={{ prefix }}
              - --libdir={{ prefix }}/lib
              - --buildtype=release
              - --wrap-mode=nofallback

        test:
          dependencies:
            tea.xyz/gx/cc: c99
          script: |
            mv $FIXTURE test.c
            gcc test.c -lslirp -o test
            ./test
          fixture: |
            #include <stdio.h>
            #include <string.h>
            #include <stddef.h>
            #include <slirp/libslirp.h>
            int main() {
              SlirpConfig cfg;
              memset(&cfg, 0, sizeof(cfg));
              cfg.version = 1;
              cfg.in_enabled = true;
              cfg.vhostname = "testServer";
              Slirp* ctx = slirp_new(&cfg, NULL, NULL);
              return 0;
            }



    Here's an example ruby formula for the project pygobject3:


        class Pygobject3 < Formula
          homepage "https://wiki.gnome.org/Projects/PyGObject"
          url "https://download.gnome.org/sources/pygobject/3.44/pygobject-3.44.1.tar.xz"
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          depends_on "python@3.10" => [:build, :test]
          depends_on "python@3.11" => [:build, :test]
          depends_on "gobject-introspection"
          depends_on "py3cairo"
          def pythons
            deps.map(&:to_formula)
                .select { |f| f.name.match?(/^python@\d\.\d+$/) }
                .map { |f| f.opt_libexec/"bin/python" }
          end
          def site_packages(python)
            prefix/Language::Python.site_packages(python)
          end
          def install
            pythons.each do |python|
              xy = Language::Python.major_minor_version(python)
              builddir = "buildpy#{xy}".delete(".")
              system "meson", "setup", builddir, "-Dpycairo=enabled",
                                                 "-Dpython=#{python}",
                                                 "-Dpython.platlibdir=#{site_packages(python)}",
                                                 "-Dpython.purelibdir=#{site_packages(python)}",
                                                 *std_meson_args
              system "meson", "compile", "-C", builddir, "--verbose"
              system "meson", "install", "-C", builddir
            end
          end
          test do
            Pathname("test.py").write <<~EOS
              import gi
              gi.require_version("GLib", "2.0")
              assert("__init__" in gi.__file__)
              from gi.repository import GLib
              assert(31 == GLib.Date.get_days_in_month(GLib.DateMonth.JANUARY, 2000))
            EOS
            pythons.each do |python|
              system python, "test.py"
            end
          end
        end



    Based on the examples provided, write a formula for the project pygobject3 in the yml format:
