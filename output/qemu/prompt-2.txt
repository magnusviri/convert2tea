You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project librist:


        class Librist < Formula
          homepage "https://code.videolan.org/rist/"
          url "https://code.videolan.org/rist/librist/-/archive/v0.2.7/librist-v0.2.7.tar.gz"
          revision 3
          head "https://code.videolan.org/rist/librist.git", branch: "master"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "cjson"
          depends_on "mbedtls"
          def install
            ENV.append "LDFLAGS", "-Wl,-rpath,#{rpath}"
            system "meson", "setup", "--default-library", "both", "-Dfallback_builtin=false", *std_meson_args, "build", "."
            system "meson", "compile", "-C", "build"
            system "meson", "install", "-C", "build"
          end
          test do
            assert_match "Starting ristsender", shell_output("#{bin}/ristsender 2>&1", 1)
          end
        end



    Here's an example formula in the yml format for the project librist:


        distributable:
          url: https://code.videolan.org/rist/librist/-/archive/v{{version}}/librist-v{{version}}.tar.gz
          strip-components: 1

        versions:
          - 0.2.7

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            mesonbuild.com: ^0.47
            ninja-build.org: 1
          working-directory:
            build
          script: |
            meson .. --prefix={{prefix}} --libdir={{prefix}}/lib --buildtype=release
            ninja -v
            ninja install
          env:
            CC: clang

        test:
          script: |
            ristsrppasswd test test

        provides:
          - bin/rist2rist
          - bin/ristreceiver
          - bin/ristsender
          - bin/ristsrppasswd



    Here's an example ruby formula for the project qemu:


        class Qemu < Formula
          homepage "https://www.qemu.org/"
          url "https://download.qemu.org/qemu-7.2.0.tar.xz"
          head "https://git.qemu.org/git/qemu.git", branch: "master"
          depends_on "libtool" => :build
          depends_on "meson" => :build
          depends_on "ninja" => :build
          depends_on "pkg-config" => :build
          depends_on "capstone"
          depends_on "glib"
          depends_on "gnutls"
          depends_on "jpeg-turbo"
          depends_on "libpng"
          depends_on "libslirp"
          depends_on "libssh"
          depends_on "libusb"
          depends_on "lzo"
          depends_on "ncurses"
          depends_on "nettle"
          depends_on "pixman"
          depends_on "snappy"
          depends_on "vde"
          depends_on "zstd"
          on_linux do
            depends_on "attr"
            depends_on "gtk+3"
            depends_on "libcap-ng"
          end
          fails_with gcc: "5"
          # 820KB floppy disk image file of FreeDOS 1.2, used to test QEMU
          def install
            ENV["LIBTOOL"] = "glibtool"
            args = %W[
              --prefix=#{prefix}
              --cc=#{ENV.cc}
              --host-cc=#{ENV.cc}
              --disable-bsd-user
              --disable-guest-agent
              --enable-slirp
              --enable-capstone
              --enable-curses
              --enable-libssh
              --enable-vde
              --enable-virtfs
              --enable-zstd
              --extra-cflags=-DNCURSES_WIDECHAR=1
              --disable-sdl
            ]
            # Sharing Samba directories in QEMU requires the samba.org smbd which is
            # incompatible with the macOS-provided version. This will lead to
            # silent runtime failures, so we set it to a Homebrew path in order to
            # obtain sensible runtime errors. This will also be compatible with
            # Samba installations from external taps.
            args << "--smbd=#{HOMEBREW_PREFIX}/sbin/samba-dot-org-smbd"
            args += if OS.mac?
              ["--disable-gtk", "--enable-cocoa"]
            else
              ["--enable-gtk"]
            end
            system "./configure", *args
            system "make", "V=1", "install"
          end
          test do
            expected = build.stable? ? version.to_s : "QEMU Project"
            assert_match expected, shell_output("#{bin}/qemu-system-aarch64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-alpha --version")
            assert_match expected, shell_output("#{bin}/qemu-system-arm --version")
            assert_match expected, shell_output("#{bin}/qemu-system-cris --version")
            assert_match expected, shell_output("#{bin}/qemu-system-hppa --version")
            assert_match expected, shell_output("#{bin}/qemu-system-i386 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-m68k --version")
            assert_match expected, shell_output("#{bin}/qemu-system-microblaze --version")
            assert_match expected, shell_output("#{bin}/qemu-system-microblazeel --version")
            assert_match expected, shell_output("#{bin}/qemu-system-mips --version")
            assert_match expected, shell_output("#{bin}/qemu-system-mips64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-mips64el --version")
            assert_match expected, shell_output("#{bin}/qemu-system-mipsel --version")
            assert_match expected, shell_output("#{bin}/qemu-system-nios2 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-or1k --version")
            assert_match expected, shell_output("#{bin}/qemu-system-ppc --version")
            assert_match expected, shell_output("#{bin}/qemu-system-ppc64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-riscv32 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-riscv64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-rx --version")
            assert_match expected, shell_output("#{bin}/qemu-system-s390x --version")
            assert_match expected, shell_output("#{bin}/qemu-system-sh4 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-sh4eb --version")
            assert_match expected, shell_output("#{bin}/qemu-system-sparc --version")
            assert_match expected, shell_output("#{bin}/qemu-system-sparc64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-tricore --version")
            assert_match expected, shell_output("#{bin}/qemu-system-x86_64 --version")
            assert_match expected, shell_output("#{bin}/qemu-system-xtensa --version")
            assert_match expected, shell_output("#{bin}/qemu-system-xtensaeb --version")
            resource("homebrew-test-image").stage testpath
            assert_match "file format: raw", shell_output("#{bin}/qemu-img info FLOPPY.img")
          end
        end



    Based on the examples provided, write a formula for the project qemu in the yml format:
