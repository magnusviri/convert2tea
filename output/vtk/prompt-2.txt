You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bitcoin:


        class Bitcoin < Formula
          homepage "https://bitcoincore.org/"
          url "https://bitcoincore.org/bin/bitcoin-core-24.0.1/bitcoin-24.0.1.tar.gz"
          head "https://github.com/bitcoin/bitcoin.git", branch: "master"
          livecheck do
            url "https://bitcoincore.org/en/download/"
            regex(/latest version.*?v?(\d+(?:\.\d+)+)/i)
          end
          depends_on "autoconf" => :build
          depends_on "automake" => :build
          depends_on "libtool" => :build
          depends_on "pkg-config" => :build
          # berkeley db should be kept at version 4
          # https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md
          # https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md
          depends_on "berkeley-db@4"
          depends_on "boost"
          depends_on "libevent"
          depends_on macos: :catalina
          depends_on "miniupnpc"
          depends_on "zeromq"
          uses_from_macos "sqlite"
          on_linux do
            depends_on "util-linux" => :build # for `hexdump`
          end
          fails_with :gcc do
            version "7" # fails with GCC 7.x and earlier
            cause "Requires std::filesystem support"
          end
          def install
            system "./autogen.sh"
            system "./configure", *std_configure_args,
                                  "--disable-silent-rules",
                                  "--with-boost-libdir=#{Formula["boost"].opt_lib}"
            system "make", "install"
            pkgshare.install "share/rpcauth"
          end
          service do
            run opt_bin/"bitcoind"
          end
          test do
            system "#{bin}/test_bitcoin"
            # Test that we're using the right version of `berkeley-db`.
            port = free_port
            bitcoind = spawn bin/"bitcoind", "-regtest", "-rpcport=#{port}", "-listen=0", "-datadir=#{testpath}"
            sleep 15
            # This command will fail if we have too new a version.
            system bin/"bitcoin-cli", "-regtest", "-datadir=#{testpath}", "-rpcport=#{port}",
                                      "createwallet", "test-wallet", "false", "false", "", "false", "false"
          ensure
            Process.kill "TERM", bitcoind
          end
        end



    Here's an example formula in the yml format for the project bitcoin:


        distributable:
          url: https://bitcoincore.org/bin/bitcoin-core-{{version}}/bitcoin-{{version}}.tar.gz
          strip-components: 1

        versions:
          github: bitcoin/bitcoin
          strip: /^Bitcoin Core /

        dependencies:
          oracle.com/berkeley-db: ^18
          boost.org: ^1
          libevent.org: ^2
          zeromq.org: ^4
          sqlite.org: ^3

        build:
          dependencies:
            gnu.org/autoconf: ^2
            gnu.org/automake: ^1
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            freedesktop.org/pkg-config: ^0.29
            gnu.org/libtool: ^2
          script: |
            ./autogen.sh
            ./configure $ARGS
            make --jobs {{ hw.concurrency }} install
          env:
            ARGS:
              - --prefix={{prefix}}
              - --disable-debug
              - --disable-tests  # needs: `hexedit`
              - --disable-bench  # fails: linux/aarch64/v24.0.1

        provides:
          - bin/bitcoin-cli
          - bin/bitcoin-tx
          - bin/bitcoin-util
          - bin/bitcoin-wallet
          - bin/bitcoind

        test:
          bitcoind -version



    Here's an example ruby formula for the project vtk:


        class Vtk < Formula
          homepage "https://www.vtk.org/"
          url "https://www.vtk.org/files/release/9.2/VTK-9.2.6.tar.gz"
          head "https://gitlab.kitware.com/vtk/vtk.git", branch: "master"
          depends_on "cmake" => [:build, :test]
          depends_on "boost"
          depends_on "double-conversion"
          depends_on "eigen"
          depends_on "fontconfig"
          depends_on "gl2ps"
          depends_on "glew"
          depends_on "hdf5"
          depends_on "jpeg-turbo"
          depends_on "jsoncpp"
          depends_on "libogg"
          depends_on "libpng"
          depends_on "libtiff"
          depends_on "lz4"
          depends_on "netcdf"
          depends_on "pugixml"
          depends_on "pyqt@5"
          depends_on "python@3.11"
          depends_on "qt@5"
          depends_on "sqlite"
          depends_on "theora"
          depends_on "utf8cpp"
          depends_on "xz"
          uses_from_macos "expat"
          uses_from_macos "libxml2"
          uses_from_macos "tcl-tk"
          uses_from_macos "zlib"
          on_macos do
            on_arm do
              if DevelopmentTools.clang_build_version == 1316
                depends_on "llvm" => :build
                # clang: error: unable to execute command: Segmentation fault: 11
                # clang: error: clang frontend command failed due to signal (use -v to see invocation)
                # Apple clang version 13.1.6 (clang-1316.0.21.2)
                fails_with :clang
              end
            end
          end
          on_linux do
            depends_on "libaec"
            depends_on "mesa-glu"
          end
          fails_with gcc: "5"
          def install
            ENV.llvm_clang if DevelopmentTools.clang_build_version == 1316 && Hardware::CPU.arm?
            args = %W[
              -DBUILD_SHARED_LIBS:BOOL=ON
              -DCMAKE_INSTALL_NAME_DIR:STRING=#{opt_lib}
              -DCMAKE_INSTALL_RPATH:STRING=#{rpath}
              -DCMAKE_DISABLE_FIND_PACKAGE_ICU:BOOL=ON
              -DVTK_WRAP_PYTHON:BOOL=ON
              -DVTK_PYTHON_VERSION:STRING=3
              -DVTK_LEGACY_REMOVE:BOOL=ON
              -DVTK_MODULE_ENABLE_VTK_InfovisBoost:STRING=YES
              -DVTK_MODULE_ENABLE_VTK_InfovisBoostGraphAlgorithms:STRING=YES
              -DVTK_MODULE_ENABLE_VTK_RenderingFreeTypeFontConfig:STRING=YES
              -DVTK_MODULE_USE_EXTERNAL_VTK_doubleconversion:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_eigen:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_expat:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_gl2ps:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_glew:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_hdf5:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_jpeg:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_jsoncpp:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_libxml2:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_lz4:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_lzma:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_netcdf:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_ogg:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_png:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_pugixml:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_sqlite:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_theora:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_tiff:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_utf8:BOOL=ON
              -DVTK_MODULE_USE_EXTERNAL_VTK_zlib:BOOL=ON
              -DPython3_EXECUTABLE:FILEPATH=#{which("python3.11")}
              -DVTK_GROUP_ENABLE_Qt:STRING=YES
              -DVTK_QT_VERSION:STRING=5
            ]
            # https://github.com/Homebrew/linuxbrew-core/pull/21654#issuecomment-738549701
            args << "-DOpenGL_GL_PREFERENCE=LEGACY"
            args << "-DVTK_USE_COCOA:BOOL=ON" if OS.mac?
            system "cmake", "-S", ".", "-B", "build", *std_cmake_args, *args
            system "cmake", "--build", "build"
            system "cmake", "--install", "build"
          end
          test do
            # Force use of Apple Clang on macOS that needs LLVM to build
            ENV.clang if DevelopmentTools.clang_build_version == 1316 && Hardware::CPU.arm?
            vtk_dir = lib/"cmake/vtk-#{version.major_minor}"
            vtk_cmake_module = vtk_dir/"VTK-vtk-module-find-packages.cmake"
            assert_match Formula["boost"].version.to_s, vtk_cmake_module.read, "VTK needs to be rebuilt against Boost!"
            (testpath/"CMakeLists.txt").write <<~EOS
              cmake_minimum_required(VERSION 3.3 FATAL_ERROR)
              project(Distance2BetweenPoints LANGUAGES CXX)
              find_package(VTK REQUIRED COMPONENTS vtkCommonCore CONFIG)
              add_executable(Distance2BetweenPoints Distance2BetweenPoints.cxx)
              target_link_libraries(Distance2BetweenPoints PRIVATE ${VTK_LIBRARIES})
            EOS
            (testpath/"Distance2BetweenPoints.cxx").write <<~EOS
              #include <cassert>
              #include <vtkMath.h>
              int main() {
                double p0[3] = {0.0, 0.0, 0.0};
                double p1[3] = {1.0, 1.0, 1.0};
                assert(vtkMath::Distance2BetweenPoints(p0, p1) == 3.0);
                return 0;
              }
            EOS
            system "cmake", ".", "-DCMAKE_BUILD_TYPE=Debug", "-DCMAKE_VERBOSE_MAKEFILE=ON", "-DVTK_DIR=#{vtk_dir}"
            system "make"
            system "./Distance2BetweenPoints"
            (testpath/"Distance2BetweenPoints.py").write <<~EOS
              import vtk
              p0 = (0, 0, 0)
              p1 = (1, 1, 1)
              assert vtk.vtkMath.Distance2BetweenPoints(p0, p1) == 3
            EOS
            system bin/"vtkpython", "Distance2BetweenPoints.py"
          end
        end



    Based on the examples provided, write a formula for the project vtk in the yml format:
