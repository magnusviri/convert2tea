You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project bcrypt:


        class Bcrypt < Formula
          homepage "https://bcrypt.sourceforge.io/"
          url "https://bcrypt.sourceforge.io/bcrypt-1.1.tar.gz"
          livecheck do
            url :homepage
            regex(/href=.*?bcrypt[._-]v?(\d+(?:\.\d+)+)\.t/i)
          end
          uses_from_macos "zlib"
          def install
            system "make", "CC=#{ENV.cc}",
                           "CFLAGS=#{ENV.cflags}",
                           "LDFLAGS=-lz"
            bin.install "bcrypt"
            man1.install Utils::Gzip.compress("bcrypt.1")
          end
          test do
            (testpath/"test.txt").write("Hello World!")
            pipe_output("#{bin}/bcrypt -r test.txt", "12345678\n12345678\n")
            mv "test.txt.bfe", "test.out.txt.bfe"
            pipe_output("#{bin}/bcrypt -r test.out.txt.bfe", "12345678\n")
            assert_equal File.read("test.txt"), File.read("test.out.txt")
          end
        end



    Here's an example formula in the yml format for the project bcrypt:


        distributable:
          url: https://bcrypt.sourceforge.net/bcrypt-{{version.marketing}}.tar.gz
          strip-components: 1

        versions:
          - 1.1.0

        dependencies:
          zlib.net: '*'

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
          script: |
            make LDFLAGS=-lz PREFIX={{prefix}} install

        provides:
          - bin/bcrypt

        test:
          script: |
            echo "Hello World!" > test.txt
            printf '12345678\n12345678\n' | bcrypt -r test.txt
            mv test.txt.bfe test.out.txt.bfe
            printf '12345678\n' | bcrypt -r test.out.txt.bfe
            cat test.out.txt




    Here's an example ruby formula for the project wxwidgets:


        class Wxwidgets < Formula
          homepage "https://www.wxwidgets.org"
          url "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.2.1/wxWidgets-3.2.2.1.tar.bz2"
          head "https://github.com/wxWidgets/wxWidgets.git", branch: "master"
          livecheck do
            url :stable
            regex(/^v?(\d+(?:\.\d+)+)$/i)
          end
          depends_on "pkg-config" => :build
          depends_on "jpeg-turbo"
          depends_on "libpng"
          depends_on "libtiff"
          depends_on "pcre2"
          uses_from_macos "expat"
          uses_from_macos "zlib"
          on_linux do
            depends_on "gtk+3"
            depends_on "libsm"
            depends_on "mesa-glu"
          end
          def install
            # Remove all bundled libraries excluding `nanosvg` which isn't available as formula
            %w[catch pcre].each { |l| (buildpath/"3rdparty"/l).rmtree }
            %w[expat jpeg png tiff zlib].each { |l| (buildpath/"src"/l).rmtree }
            args = [
              "--prefix=#{prefix}",
              "--enable-clipboard",
              "--enable-controls",
              "--enable-dataviewctrl",
              "--enable-display",
              "--enable-dnd",
              "--enable-graphics_ctx",
              "--enable-std_string",
              "--enable-svg",
              "--enable-unicode",
              "--enable-webviewwebkit",
              "--with-expat",
              "--with-libjpeg",
              "--with-libpng",
              "--with-libtiff",
              "--with-opengl",
              "--with-zlib",
              "--disable-dependency-tracking",
              "--disable-tests",
              "--disable-precomp-headers",
              # This is the default option, but be explicit
              "--disable-monolithic",
            ]
            if OS.mac?
              # Set with-macosx-version-min to avoid configure defaulting to 10.5
              args << "--with-macosx-version-min=#{MacOS.version}"
              args << "--with-osx_cocoa"
              args << "--with-libiconv"
            end
            system "./configure", *args
            system "make", "install"
            # wx-config should reference the public prefix, not wxwidgets's keg
            # this ensures that Python software trying to locate wxpython headers
            # using wx-config can find both wxwidgets and wxpython headers,
            # which are linked to the same place
            inreplace bin/"wx-config", prefix, HOMEBREW_PREFIX
            # For consistency with the versioned wxwidgets formulae
            bin.install_symlink bin/"wx-config" => "wx-config-#{version.major_minor}"
            (share/"wx"/version.major_minor).install share/"aclocal", share/"bakefile"
          end
          test do
            system bin/"wx-config", "--libs"
          end
        end



    Based on the examples provided, write a formula for the project wxwidgets in the yml format:
