You are PackageGPT, a large language model that understands package formats. You will convert from one package format to another format to another.

    Follow the instructions.

    Here's an example formula in the ruby format for the project aria2:


        class Aria2 < Formula
          homepage "https://aria2.github.io/"
          url "https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0.tar.xz"
          revision 1
          depends_on "pkg-config" => :build
          depends_on "gettext"
          depends_on "libssh2"
          depends_on "sqlite"
          uses_from_macos "libxml2"
          uses_from_macos "zlib"
          on_linux do
            depends_on "openssl@1.1"
          end
          def install
            ENV.cxx11
            args = %W[
              --disable-dependency-tracking
              --prefix=#{prefix}
              --with-libssh2
              --without-gnutls
              --without-libgmp
              --without-libnettle
              --without-libgcrypt
            ]
            if OS.mac?
              args << "--with-appletls"
              args << "--without-openssl"
            else
              args << "--without-appletls"
              args << "--with-openssl"
            end
            system "./configure", *args
            system "make", "install"
            bash_completion.install "doc/bash_completion/aria2c"
          end
          test do
            system "#{bin}/aria2c", "https://brew.sh/"
            assert_predicate testpath/"index.html", :exist?, "Failed to create index.html!"
          end
        end



    Here's an example formula in the yml format for the project aria2:


        distributable:
          url: https://github.com/aria2/aria2/releases/download/release-{{ version }}/aria2-{{ version }}.tar.xz
          strip-components: 1

        versions:
          github: aria2/aria2
          strip: /^aria2 /

        provides:
          - bin/aria2c

        dependencies:
          zlib.net: ^1
          openssl.org: ^1
          libexpat.github.io: '*'
          sqlite.org: ^3

        build:
          dependencies:
            tea.xyz/gx/cc: c99
            tea.xyz/gx/make: '*'
            gnupg.org/libgcrypt: ^1
            gnupg.org/libgpg-error: ^1
            freedesktop.org/pkg-config: '*'
          script: |
            ./configure $ARGS
            make --jobs {{hw.concurrency}}
            make install
          env:
            ARGS:
              - --prefix="{{prefix}}"
              - --with-openssl
              - --with-libgcrypt

        test: |
          aria2c -v
          aria2c https://tea.xyz
          aria2c --seed-time=0 "magnet:?xt=urn:btih:d984f67af9917b214cd8b6048ab5624c7df6a07a&tr=https%3A%2F%2Facademictorrents.com%2Fannounce.php&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce"


    Here's an example ruby formula for the project x265:


        class X265 < Formula
          homepage "https://bitbucket.org/multicoreware/x265_git"
          url "https://bitbucket.org/multicoreware/x265_git/get/3.5.tar.gz"
          head "https://bitbucket.org/multicoreware/x265_git.git", branch: "master"
          depends_on "cmake" => :build
          on_intel do
            depends_on "nasm" => :build
          end
          def install
            # Build based off the script at ./build/linux/multilib.sh
            args = std_cmake_args + %W[
              -DLINKED_10BIT=ON
              -DLINKED_12BIT=ON
              -DEXTRA_LINK_FLAGS=-L.
              -DEXTRA_LIB=x265_main10.a;x265_main12.a
              -DCMAKE_INSTALL_RPATH=#{rpath}
            ]
            high_bit_depth_args = std_cmake_args + %w[
              -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF
              -DENABLE_SHARED=OFF -DENABLE_CLI=OFF
            ]
            (buildpath/"8bit").mkpath
            mkdir "10bit" do
              system "cmake", buildpath/"source", "-DENABLE_HDR10_PLUS=ON", *high_bit_depth_args
              system "make"
              mv "libx265.a", buildpath/"8bit/libx265_main10.a"
            end
            mkdir "12bit" do
              system "cmake", buildpath/"source", "-DMAIN12=ON", *high_bit_depth_args
              system "make"
              mv "libx265.a", buildpath/"8bit/libx265_main12.a"
            end
            cd "8bit" do
              system "cmake", buildpath/"source", *args
              system "make"
              mv "libx265.a", "libx265_main.a"
              if OS.mac?
                system "libtool", "-static", "-o", "libx265.a", "libx265_main.a",
                                  "libx265_main10.a", "libx265_main12.a"
              else
                system "ar", "cr", "libx265.a", "libx265_main.a", "libx265_main10.a",
                                   "libx265_main12.a"
                system "ranlib", "libx265.a"
              end
              system "make", "install"
            end
          end
          test do
            yuv_path = testpath/"raw.yuv"
            x265_path = testpath/"x265.265"
            yuv_path.binwrite "\xCO\xFF\xEE" * 3200
            system bin/"x265", "--input-res", "80x80", "--fps", "1", yuv_path, x265_path
            header = "AAAAAUABDAH//w=="
            assert_equal header.unpack("m"), [x265_path.read(10)]
          end
        end



    Based on the examples provided, write a formula for the project x265 in the yml format:
